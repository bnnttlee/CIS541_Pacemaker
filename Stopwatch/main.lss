
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800102  00800102  00000874  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ad  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  00000ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044c  00000000  00000000  0000147b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009f4  00000000  00000000  000018c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a0  00000000  00000000  000022bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000337  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f2  00000000  00000000  00002793  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <__vector_2>
   c:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_3>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 97 00 	jmp	0x12e	; 0x12e <__vector_10>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 b1 02 	jmp	0x562	; 0x562 <__vector_22>

0000005c <LCD_character_table>:
  5c:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ee ed       	ldi	r30, 0xDE	; 222
  dc:	f7 e0       	ldi	r31, 0x07	; 7
  de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
  e4:	a2 30       	cpi	r26, 0x02	; 2
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	a2 e0       	ldi	r26, 0x02	; 2
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ae 33       	cpi	r26, 0x3E	; 62
  f6:	b1 07       	cpc	r27, r17
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 01 02 	call	0x402	; 0x402 <main>
  fe:	0c 94 ed 03 	jmp	0x7da	; 0x7da <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <RTC_init>:
{ 
	//Wait for 1 sec
	//delay(1000);
	
	//set Clock Prescaler Change Enable
	CLKPR = (1<<CLKPCE);
 106:	e1 e6       	ldi	r30, 0x61	; 97
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	80 83       	st	Z, r24
	
	//set prescaler = 8, Inter RC 8MHz/8 = 1MHz
	CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	80 83       	st	Z, r24
	
	//Enable timer0 compare interrupt
	TIMSK0 = (1<<OCIE0A);
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	80 93 6e 00 	sts	0x006E, r24
	
	//Sets the compare value
	OCR0A = 38;
 118:	86 e2       	ldi	r24, 0x26	; 38
 11a:	87 bd       	out	0x27, r24	; 39
	
	//Now, Timer will run 1Mhz/38 = 26315 Hz
	//Set Clear on Timer Compare (CTC) mode, CLK/256 prescaler
	
	TCCR0A = (1<<WGM01) | (0<<WGM00) | (4<<CS00);
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	84 bd       	out	0x24, r24	; 36

    // initial time and date setting
    gMILLISECOND  = 0;
 120:	10 92 0a 01 	sts	0x010A, r1
    gSECOND  = 0;
 124:	10 92 0d 01 	sts	0x010D, r1
    gMINUTE    = 0;
 128:	10 92 0e 01 	sts	0x010E, r1
}
 12c:	08 95       	ret

0000012e <__vector_10>:


SIGNAL(SIG_OUTPUT_COMPARE0)
{
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	8f 93       	push	r24
    if (active)
 13a:	80 91 04 01 	lds	r24, 0x0104
 13e:	88 23       	and	r24, r24
 140:	29 f0       	breq	.+10     	; 0x14c <__vector_10+0x1e>
    {
    gMILLISECOND++;// increment second
 142:	80 91 0a 01 	lds	r24, 0x010A
 146:	8f 5f       	subi	r24, 0xFF	; 255
 148:	80 93 0a 01 	sts	0x010A, r24
    }

    if (gMILLISECOND == 99)
 14c:	80 91 0a 01 	lds	r24, 0x010A
 150:	83 36       	cpi	r24, 0x63	; 99
 152:	c1 f4       	brne	.+48     	; 0x184 <__vector_10+0x56>
    {
        gMILLISECOND = 0;
 154:	10 92 0a 01 	sts	0x010A, r1
        gSECOND++;		// increment minute
 158:	80 91 0d 01 	lds	r24, 0x010D
 15c:	8f 5f       	subi	r24, 0xFF	; 255
 15e:	80 93 0d 01 	sts	0x010D, r24
        
        if (gSECOND > 59)
 162:	80 91 0d 01 	lds	r24, 0x010D
 166:	8c 33       	cpi	r24, 0x3C	; 60
 168:	68 f0       	brcs	.+26     	; 0x184 <__vector_10+0x56>
        {
            gSECOND = 0;
 16a:	10 92 0d 01 	sts	0x010D, r1
            gMINUTE++;	// increment hour
 16e:	80 91 0e 01 	lds	r24, 0x010E
 172:	8f 5f       	subi	r24, 0xFF	; 255
 174:	80 93 0e 01 	sts	0x010E, r24
            
            if (gMINUTE > 59)
 178:	80 91 0e 01 	lds	r24, 0x010E
 17c:	8c 33       	cpi	r24, 0x3C	; 60
 17e:	10 f0       	brcs	.+4      	; 0x184 <__vector_10+0x56>
            {             
                gMINUTE = 0;
 180:	10 92 0e 01 	sts	0x010E, r1
			}
        }
    }
}
 184:	8f 91       	pop	r24
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <OSCCAL_calibration>:
{
    unsigned char calibrate = 0;//FALSE;
    int temp;
    unsigned char tempL;
    
    CLKPR = (1<<CLKPCE);        // set Clock Prescaler Change Enable
 190:	80 e8       	ldi	r24, 0x80	; 128
 192:	80 93 61 00 	sts	0x0061, r24
    // set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
 196:	83 e0       	ldi	r24, 0x03	; 3
 198:	80 93 61 00 	sts	0x0061, r24
    
    TIMSK2 = 0;             //disable OCIE2A and TOIE2
 19c:	10 92 70 00 	sts	0x0070, r1
    
    ASSR = (1<<AS2);        //select asynchronous operation of timer2 (32,768kHz)
 1a0:	88 e0       	ldi	r24, 0x08	; 8
 1a2:	80 93 b6 00 	sts	0x00B6, r24
    
    OCR2A = 200;            // set timer2 compare value
 1a6:	88 ec       	ldi	r24, 0xC8	; 200
 1a8:	80 93 b3 00 	sts	0x00B3, r24
    
    TIMSK0 = 0;             // delete any interrupt sources
 1ac:	10 92 6e 00 	sts	0x006E, r1
    
    TCCR1B = (1<<CS10);     // start timer1 with no prescaling
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 81 00 	sts	0x0081, r24
    TCCR2A = (1<<CS20);     // start timer2 with no prescaling
 1b6:	80 93 b0 00 	sts	0x00B0, r24
    
    while((ASSR & 0x01) | (ASSR & 0x04));       //wait for TCN2UB and TCR2UB to be cleared
 1ba:	20 91 b6 00 	lds	r18, 0x00B6
 1be:	80 91 b6 00 	lds	r24, 0x00B6
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	84 70       	andi	r24, 0x04	; 4
 1c6:	90 70       	andi	r25, 0x00	; 0
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	21 70       	andi	r18, 0x01	; 1
 1cc:	30 70       	andi	r19, 0x00	; 0
 1ce:	82 2b       	or	r24, r18
 1d0:	93 2b       	or	r25, r19
 1d2:	89 2b       	or	r24, r25
 1d4:	91 f7       	brne	.-28     	; 0x1ba <OSCCAL_calibration+0x2a>
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1da:	20 e3       	ldi	r18, 0x30	; 48
 1dc:	35 e7       	ldi	r19, 0x75	; 117
 1de:	f9 01       	movw	r30, r18
 1e0:	31 97       	sbiw	r30, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <OSCCAL_calibration+0x50>
    
    // wait for external crystal to stabilise
	for(int i = 0; i < 10; i++)
 1e4:	01 96       	adiw	r24, 0x01	; 1
 1e6:	8a 30       	cpi	r24, 0x0A	; 10
 1e8:	91 05       	cpc	r25, r1
 1ea:	c9 f7       	brne	.-14     	; 0x1de <OSCCAL_calibration+0x4e>
    
    while(!calibrate)
    {
        cli(); // mt __disable_interrupt();  // disable global interrupt
        
        TIFR1 = 0xFF;   // delete TIFR1 flags
 1ec:	4f ef       	ldi	r20, 0xFF	; 255
        
        if (temp > 6250)
        {
            OSCCAL--;   // the internRC oscillator runs to fast, decrease the OSCCAL
        }
        else if (temp < 6120)
 1ee:	51 e0       	ldi	r21, 0x01	; 1
	for(int i = 0; i < 10; i++)
        _delay_loop_2(30000);
    
    while(!calibrate)
    {
        cli(); // mt __disable_interrupt();  // disable global interrupt
 1f0:	f8 94       	cli
        
        TIFR1 = 0xFF;   // delete TIFR1 flags
 1f2:	46 bb       	out	0x16, r20	; 22
        TIFR2 = 0xFF;   // delete TIFR2 flags
 1f4:	47 bb       	out	0x17, r20	; 23
        
        TCNT1H = 0;     // clear timer1 counter
 1f6:	10 92 85 00 	sts	0x0085, r1
        TCNT1L = 0;
 1fa:	10 92 84 00 	sts	0x0084, r1
        TCNT2 = 0;      // clear timer2 counter
 1fe:	10 92 b2 00 	sts	0x00B2, r1
        
        while ( !(TIFR2 && (1<<OCF2A)) );   // wait for timer2 compareflag
 202:	87 b3       	in	r24, 0x17	; 23
 204:	88 23       	and	r24, r24
 206:	e9 f3       	breq	.-6      	; 0x202 <OSCCAL_calibration+0x72>
        
        TCCR1B = 0; // stop timer1
 208:	10 92 81 00 	sts	0x0081, r1
        
        sei(); // __enable_interrupt();  // enable global interrupt
 20c:	78 94       	sei
        
        if ( (TIFR1 && (1<<TOV1)) )
 20e:	86 b3       	in	r24, 0x16	; 22
 210:	88 23       	and	r24, r24
 212:	b9 f4       	brne	.+46     	; 0x242 <OSCCAL_calibration+0xb2>
        {
            temp = 0xFFFF;      // if timer1 overflows, set the temp to 0xFFFF
        }
        else
        {   // read out the timer1 counter value
            tempL = TCNT1L;
 214:	90 91 84 00 	lds	r25, 0x0084
            temp = TCNT1H;
 218:	80 91 85 00 	lds	r24, 0x0085
            temp = (temp << 8);
 21c:	38 2f       	mov	r19, r24
 21e:	20 e0       	ldi	r18, 0x00	; 0
            temp += tempL;
 220:	b9 01       	movw	r22, r18
 222:	69 0f       	add	r22, r25
 224:	71 1d       	adc	r23, r1
 226:	cb 01       	movw	r24, r22
        }
        
        if (temp > 6250)
 228:	78 e1       	ldi	r23, 0x18	; 24
 22a:	8b 36       	cpi	r24, 0x6B	; 107
 22c:	97 07       	cpc	r25, r23
 22e:	24 f0       	brlt	.+8      	; 0x238 <OSCCAL_calibration+0xa8>
        {
            OSCCAL--;   // the internRC oscillator runs to fast, decrease the OSCCAL
 230:	80 91 66 00 	lds	r24, 0x0066
 234:	81 50       	subi	r24, 0x01	; 1
 236:	08 c0       	rjmp	.+16     	; 0x248 <OSCCAL_calibration+0xb8>
        }
        else if (temp < 6120)
 238:	88 5e       	subi	r24, 0xE8	; 232
 23a:	97 41       	sbci	r25, 0x17	; 23
 23c:	14 f0       	brlt	.+4      	; 0x242 <OSCCAL_calibration+0xb2>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	06 c0       	rjmp	.+12     	; 0x24e <OSCCAL_calibration+0xbe>
        {
            OSCCAL++;   // the internRC oscillator runs to slow, increase the OSCCAL
 242:	80 91 66 00 	lds	r24, 0x0066
 246:	8f 5f       	subi	r24, 0xFF	; 255
 248:	80 93 66 00 	sts	0x0066, r24
 24c:	80 e0       	ldi	r24, 0x00	; 0
        }
        else
            calibrate = 1;//TRUE;   // the interRC is correct
        
        TCCR1B = (1<<CS10); // start timer1
 24e:	50 93 81 00 	sts	0x0081, r21
    
    // wait for external crystal to stabilise
	for(int i = 0; i < 10; i++)
        _delay_loop_2(30000);
    
    while(!calibrate)
 252:	88 23       	and	r24, r24
 254:	69 f2       	breq	.-102    	; 0x1f0 <OSCCAL_calibration+0x60>
        else
            calibrate = 1;//TRUE;   // the interRC is correct
        
        TCCR1B = (1<<CS10); // start timer1
    }
}
 256:	08 95       	ret

00000258 <PinChangeInterrupt>:
void PinChangeInterrupt(void)
{
    char buttons;
    char key;
    
    buttons = (~PINB) & PINB_MASK;
 258:	83 b1       	in	r24, 0x03	; 3
    buttons |= (~PINE) & PINE_MASK;
 25a:	9c b1       	in	r25, 0x0c	; 12
 25c:	90 95       	com	r25
 25e:	9c 70       	andi	r25, 0x0C	; 12
 260:	80 95       	com	r24
 262:	80 7d       	andi	r24, 0xD0	; 208
 264:	98 2b       	or	r25, r24
    
    // Output virtual keys
    if (buttons & (1<<BUTTON_B))
 266:	97 ff       	sbrs	r25, 7
 268:	04 c0       	rjmp	.+8      	; 0x272 <PinChangeInterrupt+0x1a>
	{
        key = KEY_PAUSE;
        active = FALSE;
 26a:	10 92 04 01 	sts	0x0104, r1
 26e:	92 e0       	ldi	r25, 0x02	; 2
 270:	10 c0       	rjmp	.+32     	; 0x292 <PinChangeInterrupt+0x3a>
		
	}
    else if (buttons & (1<<BUTTON_D))
 272:	93 ff       	sbrs	r25, 3
 274:	08 c0       	rjmp	.+16     	; 0x286 <PinChangeInterrupt+0x2e>
	{
        key = KEY_RESET;
        // reset timer
        gMILLISECOND  = 0;
 276:	10 92 0a 01 	sts	0x010A, r1
        gSECOND = 0;
 27a:	10 92 0d 01 	sts	0x010D, r1
        gMINUTE = 0;
 27e:	10 92 0e 01 	sts	0x010E, r1
 282:	93 e0       	ldi	r25, 0x03	; 3
 284:	06 c0       	rjmp	.+12     	; 0x292 <PinChangeInterrupt+0x3a>
	}
    else if (buttons & (1<<BUTTON_O))
 286:	94 ff       	sbrs	r25, 4
 288:	0d c0       	rjmp	.+26     	; 0x2a4 <PinChangeInterrupt+0x4c>
     {   key = KEY_START;
        active = TRUE;
 28a:	81 e0       	ldi	r24, 0x01	; 1
 28c:	80 93 04 01 	sts	0x0104, r24
 290:	91 e0       	ldi	r25, 0x01	; 1
    {    key = KEY_NULL;
	}
    
    if(key != KEY_NULL)
    {
        if (!KEY_VALID)
 292:	80 91 03 01 	lds	r24, 0x0103
 296:	88 23       	and	r24, r24
 298:	29 f4       	brne	.+10     	; 0x2a4 <PinChangeInterrupt+0x4c>
        {
            KEY = key;          // Store key in global key buffer
 29a:	90 93 02 01 	sts	0x0102, r25
            KEY_VALID = TRUE;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 03 01 	sts	0x0103, r24
            //getkey();
        }
    }
    
    EIFR = (1<<PCIF1) | (1<<PCIF0);     // Delete pin change interrupt flags
 2a4:	80 ec       	ldi	r24, 0xC0	; 192
 2a6:	8c bb       	out	0x1c, r24	; 28
}
 2a8:	08 95       	ret

000002aa <__vector_3>:
{
    PinChangeInterrupt();
}

SIGNAL(SIG_PIN_CHANGE1)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
    PinChangeInterrupt();
 2cc:	0e 94 2c 01 	call	0x258	; 0x258 <PinChangeInterrupt>
}
 2d0:	ff 91       	pop	r31
 2d2:	ef 91       	pop	r30
 2d4:	bf 91       	pop	r27
 2d6:	af 91       	pop	r26
 2d8:	9f 91       	pop	r25
 2da:	8f 91       	pop	r24
 2dc:	7f 91       	pop	r23
 2de:	6f 91       	pop	r22
 2e0:	5f 91       	pop	r21
 2e2:	4f 91       	pop	r20
 2e4:	3f 91       	pop	r19
 2e6:	2f 91       	pop	r18
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <__vector_2>:
        TCCR1B = (1<<CS10); // start timer1
    }
}

SIGNAL(SIG_PIN_CHANGE0)
{
 2f2:	1f 92       	push	r1
 2f4:	0f 92       	push	r0
 2f6:	0f b6       	in	r0, 0x3f	; 63
 2f8:	0f 92       	push	r0
 2fa:	11 24       	eor	r1, r1
 2fc:	2f 93       	push	r18
 2fe:	3f 93       	push	r19
 300:	4f 93       	push	r20
 302:	5f 93       	push	r21
 304:	6f 93       	push	r22
 306:	7f 93       	push	r23
 308:	8f 93       	push	r24
 30a:	9f 93       	push	r25
 30c:	af 93       	push	r26
 30e:	bf 93       	push	r27
 310:	ef 93       	push	r30
 312:	ff 93       	push	r31
    PinChangeInterrupt();
 314:	0e 94 2c 01 	call	0x258	; 0x258 <PinChangeInterrupt>
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	bf 91       	pop	r27
 31e:	af 91       	pop	r26
 320:	9f 91       	pop	r25
 322:	8f 91       	pop	r24
 324:	7f 91       	pop	r23
 326:	6f 91       	pop	r22
 328:	5f 91       	pop	r21
 32a:	4f 91       	pop	r20
 32c:	3f 91       	pop	r19
 32e:	2f 91       	pop	r18
 330:	0f 90       	pop	r0
 332:	0f be       	out	0x3f, r0	; 63
 334:	0f 90       	pop	r0
 336:	1f 90       	pop	r1
 338:	18 95       	reti

0000033a <getkey>:

char getkey(void)
{
    char k;
    
    cli(); // disable interrrupts so 'KEY' won't change while in use
 33a:	f8 94       	cli
    
    if (KEY_VALID) // Check for unread key in buffer
 33c:	80 91 03 01 	lds	r24, 0x0103
 340:	88 23       	and	r24, r24
 342:	21 f0       	breq	.+8      	; 0x34c <getkey+0x12>
    {
        k = KEY;
 344:	80 91 02 01 	lds	r24, 0x0102
        KEY_VALID = FALSE;
 348:	10 92 03 01 	sts	0x0103, r1
    }
    else
        k = KEY_NULL; // No key stroke available
    
    sei(); // enable interrupts
 34c:	78 94       	sei
    
    return k;
}
 34e:	08 95       	ret

00000350 <showClock>:
	return 0;
}


void showClock(void)
{
 350:	cf 92       	push	r12
 352:	df 92       	push	r13
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
	uint8_t MH, ML, SH, SL, MSH, MSL;

    MH= CHAR2BCD2(gMINUTE);   
 35c:	80 91 0e 01 	lds	r24, 0x010E
 360:	0e 94 23 02 	call	0x446	; 0x446 <CHAR2BCD2>
 364:	18 2f       	mov	r17, r24
        
    ML = (MH & 0x0F) + '0';
    MH = (MH >> 4) + '0';
 366:	08 2f       	mov	r16, r24
 368:	02 95       	swap	r16
 36a:	0f 70       	andi	r16, 0x0F	; 15

    SH = CHAR2BCD2(gSECOND);
 36c:	80 91 0d 01 	lds	r24, 0x010D
 370:	0e 94 23 02 	call	0x446	; 0x446 <CHAR2BCD2>
 374:	f8 2e       	mov	r15, r24
    SL = (SH & 0x0F) + '0';
    SH = (SH >> 4) + '0';
 376:	d8 2e       	mov	r13, r24
 378:	d2 94       	swap	r13
 37a:	9f e0       	ldi	r25, 0x0F	; 15
 37c:	d9 22       	and	r13, r25

    MSH = CHAR2BCD2(gMILLISECOND);
 37e:	80 91 0a 01 	lds	r24, 0x010A
 382:	0e 94 23 02 	call	0x446	; 0x446 <CHAR2BCD2>
 386:	e8 2e       	mov	r14, r24
    MSL = (MSH & 0x0F) + '0';
    MSH = (MSH >> 4) + '0';
 388:	c8 2e       	mov	r12, r24
 38a:	c2 94       	swap	r12
 38c:	8f e0       	ldi	r24, 0x0F	; 15
 38e:	c8 22       	and	r12, r24
    
    LCD_putc(0, MH);
 390:	00 5d       	subi	r16, 0xD0	; 208
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	60 2f       	mov	r22, r16
 396:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    LCD_putc(1, ML);
 39a:	1f 70       	andi	r17, 0x0F	; 15
 39c:	10 5d       	subi	r17, 0xD0	; 208
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	61 2f       	mov	r22, r17
 3a2:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    LCD_putc(2, SH);
 3a6:	80 e3       	ldi	r24, 0x30	; 48
 3a8:	d8 0e       	add	r13, r24
 3aa:	82 e0       	ldi	r24, 0x02	; 2
 3ac:	6d 2d       	mov	r22, r13
 3ae:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    LCD_putc(3, SL);
 3b2:	8f e0       	ldi	r24, 0x0F	; 15
 3b4:	f8 22       	and	r15, r24
 3b6:	80 e3       	ldi	r24, 0x30	; 48
 3b8:	f8 0e       	add	r15, r24
 3ba:	83 e0       	ldi	r24, 0x03	; 3
 3bc:	6f 2d       	mov	r22, r15
 3be:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    LCD_putc(4, MSH);
 3c2:	80 e3       	ldi	r24, 0x30	; 48
 3c4:	c8 0e       	add	r12, r24
 3c6:	84 e0       	ldi	r24, 0x04	; 4
 3c8:	6c 2d       	mov	r22, r12
 3ca:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    LCD_putc(5, MSL);
 3ce:	8f e0       	ldi	r24, 0x0F	; 15
 3d0:	e8 22       	and	r14, r24
 3d2:	80 e3       	ldi	r24, 0x30	; 48
 3d4:	e8 0e       	add	r14, r24
 3d6:	85 e0       	ldi	r24, 0x05	; 5
 3d8:	6e 2d       	mov	r22, r14
 3da:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    LCD_putc(6, '\0');
 3de:	86 e0       	ldi	r24, 0x06	; 6
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	0e 94 be 03 	call	0x77c	; 0x77c <LCD_putc>
    
    LCD_Colon(1);
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 cf 03 	call	0x79e	; 0x79e <LCD_Colon>
    
    LCD_UpdateRequired(TRUE, 0);
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_UpdateRequired>
}
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <main>:
	
int main(){ 

	int i;
	// Calibrate the oscillator:
	OSCCAL_calibration();   
 402:	0e 94 c8 00 	call	0x190	; 0x190 <OSCCAL_calibration>

	// Initialize the USART
	//USARTinit();
    
    // Init port pins
	DDRB |= 0xD8;
 406:	84 b1       	in	r24, 0x04	; 4
 408:	88 6d       	ori	r24, 0xD8	; 216
 40a:	84 b9       	out	0x04, r24	; 4
    PORTB |= PINB_MASK;
 40c:	85 b1       	in	r24, 0x05	; 5
 40e:	80 6d       	ori	r24, 0xD0	; 208
 410:	85 b9       	out	0x05, r24	; 5
    DDRE = 0x00;
 412:	1d b8       	out	0x0d, r1	; 13
    PORTE |= PINE_MASK;
 414:	8e b1       	in	r24, 0x0e	; 14
 416:	8c 60       	ori	r24, 0x0C	; 12
 418:	8e b9       	out	0x0e, r24	; 14
    
    // Enable pin change interrupt on PORTB and PORTE
	PCMSK0 = PINE_MASK;
 41a:	8c e0       	ldi	r24, 0x0C	; 12
 41c:	80 93 6b 00 	sts	0x006B, r24
	PCMSK1 = PINB_MASK;
 420:	80 ed       	ldi	r24, 0xD0	; 208
 422:	80 93 6c 00 	sts	0x006C, r24
	EIFR = (1<<6)|(1<<7);
 426:	80 ec       	ldi	r24, 0xC0	; 192
 428:	8c bb       	out	0x1c, r24	; 28
	EIMSK = (1<<6)|(1<<7);
 42a:	8d bb       	out	0x1d, r24	; 29
    
    DDRD = 0xFF; // set PORTD for output
 42c:	8f ef       	ldi	r24, 0xFF	; 255
 42e:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0X00; // set PORTB for input
 430:	14 b8       	out	0x04, r1	; 4
	
    PORTB = 0xFF; // enable pullup on for input
 432:	85 b9       	out	0x05, r24	; 5
   	PORTD = 0XFF; // set LEDs off
 434:	8b b9       	out	0x0b, r24	; 11
	
	sei();
 436:	78 94       	sei
    // enable global interrupt
	
	// Initialize the RTC
	RTC_init();
 438:	0e 94 83 00 	call	0x106	; 0x106 <RTC_init>
	// Program initalization
    LCD_Init();
 43c:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_Init>
		
	while(1){
	i = i+1;
	showClock();
 440:	0e 94 a8 01 	call	0x350	; 0x350 <showClock>
 444:	fd cf       	rjmp	.-6      	; 0x440 <main+0x3e>

00000446 <CHAR2BCD2>:
*                   The input must be in the range 0 to 99.
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
 446:	48 2f       	mov	r20, r24
 448:	6a e0       	ldi	r22, 0x0A	; 10
 44a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodqi4>
 44e:	28 2f       	mov	r18, r24
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	84 e0       	ldi	r24, 0x04	; 4
 454:	22 0f       	add	r18, r18
 456:	33 1f       	adc	r19, r19
 458:	8a 95       	dec	r24
 45a:	e1 f7       	brne	.-8      	; 0x454 <CHAR2BCD2+0xe>
 45c:	84 2f       	mov	r24, r20
 45e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodqi4>
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 462:	89 2f       	mov	r24, r25
 464:	82 2b       	or	r24, r18
 466:	08 95       	ret

00000468 <CHAR2BCD3>:
*                   The result is an integer where the three lowest nibbles
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
 468:	28 2f       	mov	r18, r24
 46a:	64 e6       	ldi	r22, 0x64	; 100
 46c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodqi4>
 470:	49 2f       	mov	r20, r25
 472:	82 2f       	mov	r24, r18
 474:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodqi4>
 478:	28 2f       	mov	r18, r24
 47a:	30 e0       	ldi	r19, 0x00	; 0
    {
        high++;
        input -= 100;
    }

    high <<= 4;
 47c:	54 e0       	ldi	r21, 0x04	; 4
 47e:	22 0f       	add	r18, r18
 480:	33 1f       	adc	r19, r19
 482:	5a 95       	dec	r21
 484:	e1 f7       	brne	.-8      	; 0x47e <CHAR2BCD3+0x16>
 486:	84 2f       	mov	r24, r20
 488:	6a e0       	ldi	r22, 0x0A	; 10
 48a:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodqi4>
 48e:	28 0f       	add	r18, r24
 490:	31 1d       	adc	r19, r1
 492:	94 e0       	ldi	r25, 0x04	; 4
 494:	22 0f       	add	r18, r18
 496:	33 1f       	adc	r19, r19
 498:	9a 95       	dec	r25
 49a:	e1 f7       	brne	.-8      	; 0x494 <CHAR2BCD3+0x2c>
 49c:	84 2f       	mov	r24, r20
 49e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__udivmodqi4>
 4a2:	89 2f       	mov	r24, r25
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	28 2b       	or	r18, r24
 4a8:	39 2b       	or	r19, r25
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 4aa:	c9 01       	movw	r24, r18
 4ac:	08 95       	ret

000004ae <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
 4ae:	98 2f       	mov	r25, r24
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 4b0:	66 30       	cpi	r22, 0x06	; 6
 4b2:	b0 f5       	brcc	.+108    	; 0x520 <__stack+0x21>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 4b4:	8a 52       	subi	r24, 0x2A	; 42
 4b6:	81 35       	cpi	r24, 0x51	; 81
 4b8:	18 f0       	brcs	.+6      	; 0x4c0 <LCD_WriteDigit+0x12>
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	0c c0       	rjmp	.+24     	; 0x4d8 <LCD_WriteDigit+0x2a>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 4c0:	91 36       	cpi	r25, 0x61	; 97
 4c2:	08 f0       	brcs	.+2      	; 0x4c6 <LCD_WriteDigit+0x18>
            c &= ~0x20;                         // if necessarry
 4c4:	9f 7d       	andi	r25, 0xDF	; 223

        c -= '*';

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 4c6:	9a 52       	subi	r25, 0x2A	; 42
 4c8:	e9 2f       	mov	r30, r25
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	e4 5a       	subi	r30, 0xA4	; 164
 4d2:	ff 4f       	sbci	r31, 0xFF	; 255
 4d4:	45 91       	lpm	r20, Z+
 4d6:	54 91       	lpm	r21, Z+
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 4d8:	86 2f       	mov	r24, r22
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	dc 01       	movw	r26, r24
 4de:	a1 70       	andi	r26, 0x01	; 1
 4e0:	b0 70       	andi	r27, 0x00	; 0
 4e2:	60 fd       	sbrc	r22, 0
 4e4:	02 c0       	rjmp	.+4      	; 0x4ea <LCD_WriteDigit+0x3c>
 4e6:	90 ef       	ldi	r25, 0xF0	; 240
 4e8:	01 c0       	rjmp	.+2      	; 0x4ec <LCD_WriteDigit+0x3e>
 4ea:	9f e0       	ldi	r25, 0x0F	; 15
        mask = 0x0F;                // Digit 1, 3, 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 4ec:	66 95       	lsr	r22
 4ee:	e6 2f       	mov	r30, r22
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	e0 5f       	subi	r30, 0xF0	; 240
 4f4:	fe 4f       	sbci	r31, 0xFE	; 254
 4f6:	30 e0       	ldi	r19, 0x00	; 0

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 4f8:	24 2f       	mov	r18, r20
 4fa:	2f 70       	andi	r18, 0x0F	; 15
        seg >>= 4;
 4fc:	84 e0       	ldi	r24, 0x04	; 4
 4fe:	56 95       	lsr	r21
 500:	47 95       	ror	r20
 502:	8a 95       	dec	r24
 504:	e1 f7       	brne	.-8      	; 0x4fe <LCD_WriteDigit+0x50>
        if (digit & 0x01)
 506:	10 97       	sbiw	r26, 0x00	; 0
 508:	11 f0       	breq	.+4      	; 0x50e <__stack+0xf>
            nibble <<= 4;
 50a:	22 95       	swap	r18
 50c:	20 7f       	andi	r18, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 50e:	80 81       	ld	r24, Z
 510:	89 23       	and	r24, r25
 512:	28 2b       	or	r18, r24
 514:	20 83       	st	Z, r18
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 516:	3f 5f       	subi	r19, 0xFF	; 255
 518:	34 30       	cpi	r19, 0x04	; 4
 51a:	11 f0       	breq	.+4      	; 0x520 <__stack+0x21>
        nibble = seg & 0x000F;
        seg >>= 4;
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
 51c:	35 96       	adiw	r30, 0x05	; 5
 51e:	ec cf       	rjmp	.-40     	; 0x4f8 <LCD_WriteDigit+0x4a>
 520:	08 95       	ret

00000522 <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 522:	81 11       	cpse	r24, r1
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	e0 e1       	ldi	r30, 0x10	; 16
 528:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 52a:	81 93       	st	Z+, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	e4 32       	cpi	r30, 0x24	; 36
 530:	f9 07       	cpc	r31, r25
 532:	d9 f7       	brne	.-10     	; 0x52a <LCD_AllSegments+0x8>
        *(LCD_Data + i) = show;
}
 534:	08 95       	ret

00000536 <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	0e 94 91 02 	call	0x522	; 0x522 <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 53c:	8f e0       	ldi	r24, 0x0F	; 15
 53e:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 542:	87 eb       	ldi	r24, 0xB7	; 183
 544:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 548:	87 e0       	ldi	r24, 0x07	; 7
 54a:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 54e:	e4 ee       	ldi	r30, 0xE4	; 228
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 ec       	ldi	r24, 0xC0	; 192
 554:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 556:	80 81       	ld	r24, Z
 558:	88 60       	ori	r24, 0x08	; 8
 55a:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 55c:	10 92 05 01 	sts	0x0105, r1


}
 560:	08 95       	ret

00000562 <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
 562:	1f 92       	push	r1
 564:	0f 92       	push	r0
 566:	0f b6       	in	r0, 0x3f	; 63
 568:	0f 92       	push	r0
 56a:	11 24       	eor	r1, r1
 56c:	ef 92       	push	r14
 56e:	ff 92       	push	r15
 570:	0f 93       	push	r16
 572:	1f 93       	push	r17
 574:	2f 93       	push	r18
 576:	3f 93       	push	r19
 578:	4f 93       	push	r20
 57a:	5f 93       	push	r21
 57c:	6f 93       	push	r22
 57e:	7f 93       	push	r23
 580:	8f 93       	push	r24
 582:	9f 93       	push	r25
 584:	af 93       	push	r26
 586:	bf 93       	push	r27
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
        auto_joystick_count = 0;
*/

/**************** Auto press joystick for the main.c, END ***************/    

    LCD_timer--;                    // Decreased every LCD frame
 590:	00 91 00 01 	lds	r16, 0x0100
 594:	01 50       	subi	r16, 0x01	; 1
 596:	00 93 00 01 	sts	0x0100, r16

    if (gScrollMode)
 59a:	80 91 0f 01 	lds	r24, 0x010F
 59e:	88 23       	and	r24, r24
 5a0:	71 f0       	breq	.+28     	; 0x5be <__vector_22+0x5c>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
 5a2:	00 23       	and	r16, r16
 5a4:	71 f4       	brne	.+28     	; 0x5c2 <__vector_22+0x60>
        {
            if (gLCD_Start_Scroll_Timer == 0)
 5a6:	80 91 06 01 	lds	r24, 0x0106
 5aa:	88 23       	and	r24, r24
 5ac:	21 f4       	brne	.+8      	; 0x5b6 <__vector_22+0x54>
            {
                gLCD_Update_Required = TRUE;
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	80 93 05 01 	sts	0x0105, r24
 5b4:	06 c0       	rjmp	.+12     	; 0x5c2 <__vector_22+0x60>
            }
            else
                gLCD_Start_Scroll_Timer--;
 5b6:	81 50       	subi	r24, 0x01	; 1
 5b8:	80 93 06 01 	sts	0x0106, r24
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <__vector_22+0x60>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
 5be:	10 92 3d 01 	sts	0x013D, r1
    }


    EOL = FALSE;
    if (gLCD_Update_Required == TRUE)
 5c2:	80 91 05 01 	lds	r24, 0x0105
 5c6:	81 30       	cpi	r24, 0x01	; 1
 5c8:	09 f0       	breq	.+2      	; 0x5cc <__vector_22+0x6a>
 5ca:	53 c0       	rjmp	.+166    	; 0x672 <__vector_22+0x110>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
 5cc:	e0 90 07 01 	lds	r14, 0x0107
 5d0:	ff 24       	eor	r15, r15
 5d2:	10 e0       	ldi	r17, 0x00	; 0
 5d4:	c0 e0       	ldi	r28, 0x00	; 0
 5d6:	d0 e0       	ldi	r29, 0x00	; 0
 5d8:	6c 2f       	mov	r22, r28
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
        {
            if ((gScroll+i) >= 0 && (!EOL))
 5da:	80 91 3d 01 	lds	r24, 0x013D
 5de:	99 27       	eor	r25, r25
 5e0:	87 fd       	sbrc	r24, 7
 5e2:	90 95       	com	r25
 5e4:	8c 0f       	add	r24, r28
 5e6:	9d 1f       	adc	r25, r29
 5e8:	97 fd       	sbrc	r25, 7
 5ea:	16 c0       	rjmp	.+44     	; 0x618 <__vector_22+0xb6>
 5ec:	11 23       	and	r17, r17
 5ee:	a1 f4       	brne	.+40     	; 0x618 <__vector_22+0xb6>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
 5f0:	80 91 3d 01 	lds	r24, 0x013D
 5f4:	99 27       	eor	r25, r25
 5f6:	87 fd       	sbrc	r24, 7
 5f8:	90 95       	com	r25
 5fa:	fe 01       	movw	r30, r28
 5fc:	ec 5d       	subi	r30, 0xDC	; 220
 5fe:	fe 4f       	sbci	r31, 0xFE	; 254
 600:	e8 0f       	add	r30, r24
 602:	f9 1f       	adc	r31, r25
 604:	80 81       	ld	r24, Z
                c_flash = c & 0x80 ? 1 : 0;
 606:	f8 2e       	mov	r15, r24
 608:	ff 1c       	adc	r15, r15
 60a:	ff 24       	eor	r15, r15
 60c:	ff 1c       	adc	r15, r15
                c = c & 0x7F;
 60e:	8f 77       	andi	r24, 0x7F	; 127

                if (c == '\0')
 610:	21 f4       	brne	.+8      	; 0x61a <__vector_22+0xb8>
 612:	1c 2f       	mov	r17, r28
 614:	1f 5f       	subi	r17, 0xFF	; 255
 616:	01 c0       	rjmp	.+2      	; 0x61a <__vector_22+0xb8>
 618:	80 e2       	ldi	r24, 0x20	; 32
            else
                c = ' ';

            // Check if this character is flashing

            if (c_flash && flash)
 61a:	ff 20       	and	r15, r15
 61c:	21 f0       	breq	.+8      	; 0x626 <__vector_22+0xc4>
 61e:	94 e0       	ldi	r25, 0x04	; 4
 620:	9e 15       	cp	r25, r14
 622:	08 f4       	brcc	.+2      	; 0x626 <__vector_22+0xc4>
                LCD_WriteDigit(' ', i);
 624:	80 e2       	ldi	r24, 0x20	; 32
            else
                LCD_WriteDigit(c, i);
 626:	0e 94 57 02 	call	0x4ae	; 0x4ae <LCD_WriteDigit>
 62a:	21 96       	adiw	r28, 0x01	; 1
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
 62c:	c6 30       	cpi	r28, 0x06	; 6
 62e:	d1 05       	cpc	r29, r1
 630:	99 f6       	brne	.-90     	; 0x5d8 <__vector_22+0x76>
 632:	ac ee       	ldi	r26, 0xEC	; 236
 634:	b0 e0       	ldi	r27, 0x00	; 0
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
            *(pLCDREG + i) = *(LCD_Data+i);
 636:	fd 01       	movw	r30, r26
 638:	ec 5d       	subi	r30, 0xDC	; 220
 63a:	ff 4f       	sbci	r31, 0xFF	; 255
 63c:	80 81       	ld	r24, Z
 63e:	8d 93       	st	X+, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
 640:	81 e0       	ldi	r24, 0x01	; 1
 642:	a0 30       	cpi	r26, 0x00	; 0
 644:	b8 07       	cpc	r27, r24
 646:	b9 f7       	brne	.-18     	; 0x636 <__vector_22+0xd4>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
 648:	80 91 08 01 	lds	r24, 0x0108
 64c:	88 23       	and	r24, r24
 64e:	21 f0       	breq	.+8      	; 0x658 <__vector_22+0xf6>
            *(pLCDREG + 8) = 0x01;
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	80 93 f4 00 	sts	0x00F4, r24
 656:	02 c0       	rjmp	.+4      	; 0x65c <__vector_22+0xfa>
        else
            *(pLCDREG + 8) = 0x00;
 658:	10 92 f4 00 	sts	0x00F4, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
 65c:	11 30       	cpi	r17, 0x01	; 1
 65e:	11 f4       	brne	.+4      	; 0x664 <__vector_22+0x102>
            gScroll = -6;
 660:	8a ef       	ldi	r24, 0xFA	; 250
 662:	03 c0       	rjmp	.+6      	; 0x66a <__vector_22+0x108>
        else
            gScroll++;
 664:	80 91 3d 01 	lds	r24, 0x013D
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	80 93 3d 01 	sts	0x013D, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
 66e:	10 92 05 01 	sts	0x0105, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
 672:	00 23       	and	r16, r16
 674:	19 f4       	brne	.+6      	; 0x67c <__vector_22+0x11a>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
 676:	83 e0       	ldi	r24, 0x03	; 3
 678:	80 93 00 01 	sts	0x0100, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
 67c:	80 91 07 01 	lds	r24, 0x0107
 680:	8a 30       	cpi	r24, 0x0A	; 10
 682:	19 f4       	brne	.+6      	; 0x68a <__vector_22+0x128>
        gFlashTimer= 0;
 684:	10 92 07 01 	sts	0x0107, r1
 688:	03 c0       	rjmp	.+6      	; 0x690 <__vector_22+0x12e>
    else
        gFlashTimer++;
 68a:	8f 5f       	subi	r24, 0xFF	; 255
 68c:	80 93 07 01 	sts	0x0107, r24

}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	bf 91       	pop	r27
 69a:	af 91       	pop	r26
 69c:	9f 91       	pop	r25
 69e:	8f 91       	pop	r24
 6a0:	7f 91       	pop	r23
 6a2:	6f 91       	pop	r22
 6a4:	5f 91       	pop	r21
 6a6:	4f 91       	pop	r20
 6a8:	3f 91       	pop	r19
 6aa:	2f 91       	pop	r18
 6ac:	1f 91       	pop	r17
 6ae:	0f 91       	pop	r16
 6b0:	ff 90       	pop	r15
 6b2:	ef 90       	pop	r14
 6b4:	0f 90       	pop	r0
 6b6:	0f be       	out	0x3f, r0	; 63
 6b8:	0f 90       	pop	r0
 6ba:	1f 90       	pop	r1
 6bc:	18 95       	reti

000006be <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
 6be:	38 2f       	mov	r19, r24
 6c0:	29 2f       	mov	r18, r25
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 6c2:	80 91 05 01 	lds	r24, 0x0105
 6c6:	88 23       	and	r24, r24
 6c8:	e1 f7       	brne	.-8      	; 0x6c2 <LCD_puts_f+0x4>
 6ca:	a4 e2       	ldi	r26, 0x24	; 36
 6cc:	b1 e0       	ldi	r27, 0x01	; 1
 6ce:	83 2f       	mov	r24, r19
 6d0:	92 2f       	mov	r25, r18
 6d2:	fc 01       	movw	r30, r24
 6d4:	01 c0       	rjmp	.+2      	; 0x6d8 <LCD_puts_f+0x1a>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 6d6:	8d 93       	st	X+, r24
 6d8:	9e 2f       	mov	r25, r30
 6da:	93 1b       	sub	r25, r19
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 6dc:	84 91       	lpm	r24, Z+
 6de:	88 23       	and	r24, r24
 6e0:	29 f0       	breq	.+10     	; 0x6ec <LCD_puts_f+0x2e>
 6e2:	31 96       	adiw	r30, 0x01	; 1
 6e4:	21 e0       	ldi	r18, 0x01	; 1
 6e6:	ad 33       	cpi	r26, 0x3D	; 61
 6e8:	b2 07       	cpc	r27, r18
 6ea:	a9 f7       	brne	.-22     	; 0x6d6 <LCD_puts_f+0x18>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
 6ec:	e9 2f       	mov	r30, r25
 6ee:	f0 e0       	ldi	r31, 0x00	; 0
 6f0:	ec 5d       	subi	r30, 0xDC	; 220
 6f2:	fe 4f       	sbci	r31, 0xFE	; 254
 6f4:	10 82       	st	Z, r1

    if (i > 6)
 6f6:	97 30       	cpi	r25, 0x07	; 7
 6f8:	48 f0       	brcs	.+18     	; 0x70c <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	80 93 0f 01 	sts	0x010F, r24
        gScroll = 0;
 700:	10 92 3d 01 	sts	0x013D, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	80 93 06 01 	sts	0x0106, r24
 70a:	04 c0       	rjmp	.+8      	; 0x714 <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 70c:	10 92 0f 01 	sts	0x010F, r1
        gScroll = 0;
 710:	10 92 3d 01 	sts	0x013D, r1
    }

    gLCD_Update_Required = 1;
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	80 93 05 01 	sts	0x0105, r24
}
 71a:	08 95       	ret

0000071c <LCD_puts>:
*
*	Purpose :		Writes a string to the LCD
*
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
 71c:	48 2f       	mov	r20, r24
 71e:	29 2f       	mov	r18, r25
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 720:	80 91 05 01 	lds	r24, 0x0105
 724:	88 23       	and	r24, r24
 726:	e1 f7       	brne	.-8      	; 0x720 <LCD_puts+0x4>
 728:	a4 e2       	ldi	r26, 0x24	; 36
 72a:	b1 e0       	ldi	r27, 0x01	; 1
 72c:	84 2f       	mov	r24, r20
 72e:	92 2f       	mov	r25, r18
 730:	9c 01       	movw	r18, r24
 732:	f9 01       	movw	r30, r18
 734:	01 c0       	rjmp	.+2      	; 0x738 <LCD_puts+0x1c>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    {
        gTextBuffer[i] = pStr[i];
 736:	8d 93       	st	X+, r24
 738:	9e 2f       	mov	r25, r30
 73a:	94 1b       	sub	r25, r20
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 73c:	80 81       	ld	r24, Z
 73e:	88 23       	and	r24, r24
 740:	29 f0       	breq	.+10     	; 0x74c <LCD_puts+0x30>
 742:	31 96       	adiw	r30, 0x01	; 1
 744:	21 e0       	ldi	r18, 0x01	; 1
 746:	ad 33       	cpi	r26, 0x3D	; 61
 748:	b2 07       	cpc	r27, r18
 74a:	a9 f7       	brne	.-22     	; 0x736 <LCD_puts+0x1a>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 74c:	e9 2f       	mov	r30, r25
 74e:	f0 e0       	ldi	r31, 0x00	; 0
 750:	ec 5d       	subi	r30, 0xDC	; 220
 752:	fe 4f       	sbci	r31, 0xFE	; 254
 754:	10 82       	st	Z, r1

    if (i > 6)
 756:	97 30       	cpi	r25, 0x07	; 7
 758:	48 f0       	brcs	.+18     	; 0x76c <LCD_puts+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	80 93 0f 01 	sts	0x010F, r24
        gScroll = 0;
 760:	10 92 3d 01 	sts	0x013D, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 764:	83 e0       	ldi	r24, 0x03	; 3
 766:	80 93 06 01 	sts	0x0106, r24
 76a:	04 c0       	rjmp	.+8      	; 0x774 <LCD_puts+0x58>
    }
    else
    {
        gScrollMode = 0;        
 76c:	10 92 0f 01 	sts	0x010F, r1
        gScroll = 0;
 770:	10 92 3d 01 	sts	0x013D, r1
    }

    gLCD_Update_Required = 1;
 774:	81 e0       	ldi	r24, 0x01	; 1
 776:	80 93 05 01 	sts	0x0105, r24
}
 77a:	08 95       	ret

0000077c <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 77c:	89 31       	cpi	r24, 0x19	; 25
 77e:	28 f4       	brcc	.+10     	; 0x78a <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 780:	e8 2f       	mov	r30, r24
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	ec 5d       	subi	r30, 0xDC	; 220
 786:	fe 4f       	sbci	r31, 0xFE	; 254
 788:	60 83       	st	Z, r22
 78a:	08 95       	ret

0000078c <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 78c:	e4 e2       	ldi	r30, 0x24	; 36
 78e:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = ' ';
 790:	80 e2       	ldi	r24, 0x20	; 32
 792:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 794:	91 e0       	ldi	r25, 0x01	; 1
 796:	ed 33       	cpi	r30, 0x3D	; 61
 798:	f9 07       	cpc	r31, r25
 79a:	d9 f7       	brne	.-10     	; 0x792 <LCD_Clear+0x6>
        gTextBuffer[i] = ' ';
}
 79c:	08 95       	ret

0000079e <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 79e:	80 93 08 01 	sts	0x0108, r24
}
 7a2:	08 95       	ret

000007a4 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
 7a4:	98 2f       	mov	r25, r24

    while (gLCD_Update_Required);
 7a6:	80 91 05 01 	lds	r24, 0x0105
 7aa:	88 23       	and	r24, r24
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <LCD_UpdateRequired+0x2>
    
    gScrollMode = scrollmode;
 7ae:	60 93 0f 01 	sts	0x010F, r22
    gScroll = 0;
 7b2:	10 92 3d 01 	sts	0x013D, r1

    gLCD_Update_Required = update;
 7b6:	90 93 05 01 	sts	0x0105, r25
}
 7ba:	08 95       	ret

000007bc <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 7bc:	10 92 07 01 	sts	0x0107, r1
}
 7c0:	08 95       	ret

000007c2 <__udivmodqi4>:
 7c2:	99 1b       	sub	r25, r25
 7c4:	79 e0       	ldi	r23, 0x09	; 9
 7c6:	04 c0       	rjmp	.+8      	; 0x7d0 <__udivmodqi4_ep>

000007c8 <__udivmodqi4_loop>:
 7c8:	99 1f       	adc	r25, r25
 7ca:	96 17       	cp	r25, r22
 7cc:	08 f0       	brcs	.+2      	; 0x7d0 <__udivmodqi4_ep>
 7ce:	96 1b       	sub	r25, r22

000007d0 <__udivmodqi4_ep>:
 7d0:	88 1f       	adc	r24, r24
 7d2:	7a 95       	dec	r23
 7d4:	c9 f7       	brne	.-14     	; 0x7c8 <__udivmodqi4_loop>
 7d6:	80 95       	com	r24
 7d8:	08 95       	ret

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
