
InterruptTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800100  00800100  00000264  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000071  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016e  00000000  00000000  000002f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011c  00000000  00000000  00000463  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000206  00000000  00000000  0000057f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000060  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ef  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000070  00000000  00000000  000008d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
   8:	0c 94 c7 00 	jmp	0x18e	; 0x18e <__vector_2>
   c:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_3>
  10:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  14:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  18:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  1c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  20:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  24:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  28:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  2c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  30:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  34:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  38:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  3c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  40:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  44:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  48:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  4c:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  50:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  54:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>
  58:	0c 94 40 00 	jmp	0x80	; 0x80 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_clear_bss>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <.do_clear_bss_start>

00000070 <.do_clear_bss_loop>:
  70:	1d 92       	st	X+, r1

00000072 <.do_clear_bss_start>:
  72:	a2 30       	cpi	r26, 0x02	; 2
  74:	b1 07       	cpc	r27, r17
  76:	e1 f7       	brne	.-8      	; 0x70 <.do_clear_bss_loop>
  78:	0e 94 42 00 	call	0x84	; 0x84 <main>
  7c:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

00000080 <__bad_interrupt>:
  80:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000084 <main>:

int main (void)
{

    // Init port pins
	DDRB |= 0xD8;
  84:	84 b1       	in	r24, 0x04	; 4
  86:	88 6d       	ori	r24, 0xD8	; 216
  88:	84 b9       	out	0x04, r24	; 4
    PORTB |= PINB_MASK;
  8a:	85 b1       	in	r24, 0x05	; 5
  8c:	80 6d       	ori	r24, 0xD0	; 208
  8e:	85 b9       	out	0x05, r24	; 5
    DDRE = 0x00;
  90:	1d b8       	out	0x0d, r1	; 13
    PORTE |= PINE_MASK;
  92:	8e b1       	in	r24, 0x0e	; 14
  94:	8c 60       	ori	r24, 0x0C	; 12
  96:	8e b9       	out	0x0e, r24	; 14

    // Enable pin change interrupt on PORTB and PORTE
	PCMSK0 = PINE_MASK;
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	80 93 6b 00 	sts	0x006B, r24
	PCMSK1 = PINB_MASK;
  9e:	80 ed       	ldi	r24, 0xD0	; 208
  a0:	80 93 6c 00 	sts	0x006C, r24
	EIFR = (1<<6)|(1<<7);
  a4:	80 ec       	ldi	r24, 0xC0	; 192
  a6:	8c bb       	out	0x1c, r24	; 28
	EIMSK = (1<<6)|(1<<7);
  a8:	8d bb       	out	0x1d, r24	; 29
	
	DDRD = 0xFF; // set PORTD for output
  aa:	8f ef       	ldi	r24, 0xFF	; 255
  ac:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0X00; // set PORTB for input
  ae:	14 b8       	out	0x04, r1	; 4
	
    PORTB = 0xFF; // enable pullup on for input
  b0:	85 b9       	out	0x05, r24	; 5
   	PORTD = 0XFF; // set LEDs off
  b2:	8b b9       	out	0x0b, r24	; 11
		
		if(input == KEY_PLUS)PORTD = ~0x01; 
		else if(input == KEY_NEXT)PORTD = ~0x02;
	    else if(input == KEY_PREV)PORTD = ~0x04; 
        else if(input == KEY_MINUS)PORTD = ~0x08;
		else if(input == KEY_ENTER)PORTD = ~0x10;
  b4:	5f ee       	ldi	r21, 0xEF	; 239
		input = getkey();
		
		if(input == KEY_PLUS)PORTD = ~0x01; 
		else if(input == KEY_NEXT)PORTD = ~0x02;
	    else if(input == KEY_PREV)PORTD = ~0x04; 
        else if(input == KEY_MINUS)PORTD = ~0x08;
  b6:	47 ef       	ldi	r20, 0xF7	; 247
	{
		input = getkey();
		
		if(input == KEY_PLUS)PORTD = ~0x01; 
		else if(input == KEY_NEXT)PORTD = ~0x02;
	    else if(input == KEY_PREV)PORTD = ~0x04; 
  b8:	3b ef       	ldi	r19, 0xFB	; 251
	while(1)
	{
		input = getkey();
		
		if(input == KEY_PLUS)PORTD = ~0x01; 
		else if(input == KEY_NEXT)PORTD = ~0x02;
  ba:	2d ef       	ldi	r18, 0xFD	; 253
	
	while(1)
	{
		input = getkey();
		
		if(input == KEY_PLUS)PORTD = ~0x01; 
  bc:	9e ef       	ldi	r25, 0xFE	; 254

char getkey(void)
{
    char k;

    cli(); // disable interrrupts so 'KEY' won't change while in use
  be:	f8 94       	cli

    if (KEY_VALID) // Check for unread key in buffer
  c0:	80 91 01 01 	lds	r24, 0x0101
  c4:	88 23       	and	r24, r24
  c6:	21 f0       	breq	.+8      	; 0xd0 <main+0x4c>
    {
        k = KEY;
  c8:	80 91 00 01 	lds	r24, 0x0100
        KEY_VALID = FALSE;
  cc:	10 92 01 01 	sts	0x0101, r1
    }
    else
        k = KEY_NULL; // No key stroke available

    sei(); // enable interrupts
  d0:	78 94       	sei
	
	while(1)
	{
		input = getkey();
		
		if(input == KEY_PLUS)PORTD = ~0x01; 
  d2:	84 30       	cpi	r24, 0x04	; 4
  d4:	11 f4       	brne	.+4      	; 0xda <main+0x56>
  d6:	9b b9       	out	0x0b, r25	; 11
  d8:	f2 cf       	rjmp	.-28     	; 0xbe <main+0x3a>
		else if(input == KEY_NEXT)PORTD = ~0x02;
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	11 f4       	brne	.+4      	; 0xe2 <main+0x5e>
  de:	2b b9       	out	0x0b, r18	; 11
  e0:	ee cf       	rjmp	.-36     	; 0xbe <main+0x3a>
	    else if(input == KEY_PREV)PORTD = ~0x04; 
  e2:	83 30       	cpi	r24, 0x03	; 3
  e4:	11 f4       	brne	.+4      	; 0xea <main+0x66>
  e6:	3b b9       	out	0x0b, r19	; 11
  e8:	ea cf       	rjmp	.-44     	; 0xbe <main+0x3a>
        else if(input == KEY_MINUS)PORTD = ~0x08;
  ea:	85 30       	cpi	r24, 0x05	; 5
  ec:	11 f4       	brne	.+4      	; 0xf2 <main+0x6e>
  ee:	4b b9       	out	0x0b, r20	; 11
  f0:	e6 cf       	rjmp	.-52     	; 0xbe <main+0x3a>
		else if(input == KEY_ENTER)PORTD = ~0x10;
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	21 f7       	brne	.-56     	; 0xbe <main+0x3a>
  f6:	5b b9       	out	0x0b, r21	; 11
  f8:	e2 cf       	rjmp	.-60     	; 0xbe <main+0x3a>

000000fa <PinChangeInterrupt>:
void PinChangeInterrupt(void)
{
    char buttons;
    char key;

    buttons = (~PINB) & PINB_MASK;
  fa:	83 b1       	in	r24, 0x03	; 3
    buttons |= (~PINE) & PINE_MASK;
  fc:	9c b1       	in	r25, 0x0c	; 12
  fe:	90 95       	com	r25
 100:	9c 70       	andi	r25, 0x0C	; 12
 102:	80 95       	com	r24
 104:	80 7d       	andi	r24, 0xD0	; 208
 106:	98 2b       	or	r25, r24

    // Output virtual keys
    if (buttons & (1<<BUTTON_A))
 108:	96 ff       	sbrs	r25, 6
 10a:	02 c0       	rjmp	.+4      	; 0x110 <PinChangeInterrupt+0x16>
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	0f c0       	rjmp	.+30     	; 0x12e <PinChangeInterrupt+0x34>
        key = KEY_PLUS;
    else if (buttons & (1<<BUTTON_B))
 110:	97 ff       	sbrs	r25, 7
 112:	02 c0       	rjmp	.+4      	; 0x118 <PinChangeInterrupt+0x1e>
 114:	95 e0       	ldi	r25, 0x05	; 5
 116:	0b c0       	rjmp	.+22     	; 0x12e <PinChangeInterrupt+0x34>
        key = KEY_MINUS;
    else if (buttons & (1<<BUTTON_C))
 118:	92 ff       	sbrs	r25, 2
 11a:	02 c0       	rjmp	.+4      	; 0x120 <PinChangeInterrupt+0x26>
 11c:	93 e0       	ldi	r25, 0x03	; 3
 11e:	07 c0       	rjmp	.+14     	; 0x12e <PinChangeInterrupt+0x34>
        key = KEY_PREV;
    else if (buttons & (1<<BUTTON_D))
 120:	93 ff       	sbrs	r25, 3
 122:	02 c0       	rjmp	.+4      	; 0x128 <PinChangeInterrupt+0x2e>
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	03 c0       	rjmp	.+6      	; 0x12e <PinChangeInterrupt+0x34>
        key = KEY_NEXT;
    else if (buttons & (1<<BUTTON_O))
 128:	94 ff       	sbrs	r25, 4
 12a:	0a c0       	rjmp	.+20     	; 0x140 <PinChangeInterrupt+0x46>
 12c:	91 e0       	ldi	r25, 0x01	; 1
    else
        key = KEY_NULL;
  
    if(key != KEY_NULL)
    {
        if (!KEY_VALID)
 12e:	80 91 01 01 	lds	r24, 0x0101
 132:	88 23       	and	r24, r24
 134:	29 f4       	brne	.+10     	; 0x140 <PinChangeInterrupt+0x46>
        {
            KEY = key;          // Store key in global key buffer
 136:	90 93 00 01 	sts	0x0100, r25
            KEY_VALID = TRUE;
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	80 93 01 01 	sts	0x0101, r24
        }
    }
    
    EIFR = (1<<PCIF1) | (1<<PCIF0);     // Delete pin change interrupt flags 
 140:	80 ec       	ldi	r24, 0xC0	; 192
 142:	8c bb       	out	0x1c, r24	; 28
}
 144:	08 95       	ret

00000146 <__vector_3>:
{
    PinChangeInterrupt();
}

SIGNAL(SIG_PIN_CHANGE1)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	4f 93       	push	r20
 156:	5f 93       	push	r21
 158:	6f 93       	push	r22
 15a:	7f 93       	push	r23
 15c:	8f 93       	push	r24
 15e:	9f 93       	push	r25
 160:	af 93       	push	r26
 162:	bf 93       	push	r27
 164:	ef 93       	push	r30
 166:	ff 93       	push	r31
    PinChangeInterrupt();    
 168:	0e 94 7d 00 	call	0xfa	; 0xfa <PinChangeInterrupt>
}
 16c:	ff 91       	pop	r31
 16e:	ef 91       	pop	r30
 170:	bf 91       	pop	r27
 172:	af 91       	pop	r26
 174:	9f 91       	pop	r25
 176:	8f 91       	pop	r24
 178:	7f 91       	pop	r23
 17a:	6f 91       	pop	r22
 17c:	5f 91       	pop	r21
 17e:	4f 91       	pop	r20
 180:	3f 91       	pop	r19
 182:	2f 91       	pop	r18
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <__vector_2>:
}       



SIGNAL(SIG_PIN_CHANGE0)
{
 18e:	1f 92       	push	r1
 190:	0f 92       	push	r0
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	0f 92       	push	r0
 196:	11 24       	eor	r1, r1
 198:	2f 93       	push	r18
 19a:	3f 93       	push	r19
 19c:	4f 93       	push	r20
 19e:	5f 93       	push	r21
 1a0:	6f 93       	push	r22
 1a2:	7f 93       	push	r23
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	af 93       	push	r26
 1aa:	bf 93       	push	r27
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
    PinChangeInterrupt();
 1b0:	0e 94 7d 00 	call	0xfa	; 0xfa <PinChangeInterrupt>
}
 1b4:	ff 91       	pop	r31
 1b6:	ef 91       	pop	r30
 1b8:	bf 91       	pop	r27
 1ba:	af 91       	pop	r26
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	7f 91       	pop	r23
 1c2:	6f 91       	pop	r22
 1c4:	5f 91       	pop	r21
 1c6:	4f 91       	pop	r20
 1c8:	3f 91       	pop	r19
 1ca:	2f 91       	pop	r18
 1cc:	0f 90       	pop	r0
 1ce:	0f be       	out	0x3f, r0	; 63
 1d0:	0f 90       	pop	r0
 1d2:	1f 90       	pop	r1
 1d4:	18 95       	reti

000001d6 <getkey>:

char getkey(void)
{
    char k;

    cli(); // disable interrrupts so 'KEY' won't change while in use
 1d6:	f8 94       	cli

    if (KEY_VALID) // Check for unread key in buffer
 1d8:	80 91 01 01 	lds	r24, 0x0101
 1dc:	88 23       	and	r24, r24
 1de:	21 f0       	breq	.+8      	; 0x1e8 <getkey+0x12>
    {
        k = KEY;
 1e0:	80 91 00 01 	lds	r24, 0x0100
        KEY_VALID = FALSE;
 1e4:	10 92 01 01 	sts	0x0101, r1
    }
    else
        k = KEY_NULL; // No key stroke available

    sei(); // enable interrupts
 1e8:	78 94       	sei

    return k;
}
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
