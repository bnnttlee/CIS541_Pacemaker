
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000048a  0000051e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000048a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800102  00800102  00000520  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001b0  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000727  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000331  00000000  00000000  00000e57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000562  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  000016ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000259  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002cb  00000000  00000000  00001a45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <__vector_22>

0000005c <LCD_character_table>:
  5c:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  88:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  98:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  a8:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  b8:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ea e8       	ldi	r30, 0x8A	; 138
  dc:	f4 e0       	ldi	r31, 0x04	; 4
  de:	02 c0       	rjmp	.+4      	; 0xe4 <.do_copy_data_start>

000000e0 <.do_copy_data_loop>:
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0

000000e4 <.do_copy_data_start>:
  e4:	a2 30       	cpi	r26, 0x02	; 2
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <.do_copy_data_loop>

000000ea <__do_clear_bss>:
  ea:	11 e0       	ldi	r17, 0x01	; 1
  ec:	a2 e0       	ldi	r26, 0x02	; 2
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a5 33       	cpi	r26, 0x35	; 53
  f6:	b1 07       	cpc	r27, r17
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 83 00 	call	0x106	; 0x106 <main>
  fe:	0c 94 43 02 	jmp	0x486	; 0x486 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <main>:
	/******************
		PORTD init
	*******************/
	
	//Set direction to [OUTPUT]
	DDRD = 0xFF;
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	8a b9       	out	0x0a, r24	; 10
	
	//set the PORTD0 to high(1)
	PORTD = 0x01;
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	8b b9       	out	0x0b, r24	; 11
	
	//Do Nothing...
	
	const char LCD_START_msg = 'LCD demo';
	LCD_Init();
 10e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_Init>
	LCD_puts_f(LCD_START_msg, 1);
 112:	8f e6       	ldi	r24, 0x6F	; 111
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	61 e0       	ldi	r22, 0x01	; 1
 118:	0e 94 99 01 	call	0x332	; 0x332 <LCD_puts_f>
	while(1){
	i = i+1;
	 PORTD = 0x01;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	8b b9       	out	0x0b, r24	; 11
 120:	fe cf       	rjmp	.-4      	; 0x11e <main+0x18>

00000122 <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
 122:	98 2f       	mov	r25, r24
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 124:	66 30       	cpi	r22, 0x06	; 6
 126:	b0 f5       	brcc	.+108    	; 0x194 <LCD_WriteDigit+0x72>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 128:	8a 52       	subi	r24, 0x2A	; 42
 12a:	81 35       	cpi	r24, 0x51	; 81
 12c:	18 f0       	brcs	.+6      	; 0x134 <LCD_WriteDigit+0x12>
 12e:	40 e0       	ldi	r20, 0x00	; 0
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	0c c0       	rjmp	.+24     	; 0x14c <LCD_WriteDigit+0x2a>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 134:	91 36       	cpi	r25, 0x61	; 97
 136:	08 f0       	brcs	.+2      	; 0x13a <LCD_WriteDigit+0x18>
            c &= ~0x20;                         // if necessarry
 138:	9f 7d       	andi	r25, 0xDF	; 223

        c -= '*';

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 13a:	9a 52       	subi	r25, 0x2A	; 42
 13c:	e9 2f       	mov	r30, r25
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	e4 5a       	subi	r30, 0xA4	; 164
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	45 91       	lpm	r20, Z+
 14a:	54 91       	lpm	r21, Z+
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 14c:	86 2f       	mov	r24, r22
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	dc 01       	movw	r26, r24
 152:	a1 70       	andi	r26, 0x01	; 1
 154:	b0 70       	andi	r27, 0x00	; 0
 156:	60 fd       	sbrc	r22, 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <LCD_WriteDigit+0x3c>
 15a:	90 ef       	ldi	r25, 0xF0	; 240
 15c:	01 c0       	rjmp	.+2      	; 0x160 <LCD_WriteDigit+0x3e>
 15e:	9f e0       	ldi	r25, 0x0F	; 15
        mask = 0x0F;                // Digit 1, 3, 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 160:	66 95       	lsr	r22
 162:	e6 2f       	mov	r30, r22
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	e9 5f       	subi	r30, 0xF9	; 249
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	30 e0       	ldi	r19, 0x00	; 0

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 16c:	24 2f       	mov	r18, r20
 16e:	2f 70       	andi	r18, 0x0F	; 15
        seg >>= 4;
 170:	84 e0       	ldi	r24, 0x04	; 4
 172:	56 95       	lsr	r21
 174:	47 95       	ror	r20
 176:	8a 95       	dec	r24
 178:	e1 f7       	brne	.-8      	; 0x172 <LCD_WriteDigit+0x50>
        if (digit & 0x01)
 17a:	10 97       	sbiw	r26, 0x00	; 0
 17c:	11 f0       	breq	.+4      	; 0x182 <LCD_WriteDigit+0x60>
            nibble <<= 4;
 17e:	22 95       	swap	r18
 180:	20 7f       	andi	r18, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 182:	80 81       	ld	r24, Z
 184:	89 23       	and	r24, r25
 186:	28 2b       	or	r18, r24
 188:	20 83       	st	Z, r18
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 18a:	3f 5f       	subi	r19, 0xFF	; 255
 18c:	34 30       	cpi	r19, 0x04	; 4
 18e:	11 f0       	breq	.+4      	; 0x194 <LCD_WriteDigit+0x72>
        nibble = seg & 0x000F;
        seg >>= 4;
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
 190:	35 96       	adiw	r30, 0x05	; 5
 192:	ec cf       	rjmp	.-40     	; 0x16c <LCD_WriteDigit+0x4a>
 194:	08 95       	ret

00000196 <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 196:	81 11       	cpse	r24, r1
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	e7 e0       	ldi	r30, 0x07	; 7
 19c:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 19e:	81 93       	st	Z+, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	eb 31       	cpi	r30, 0x1B	; 27
 1a4:	f9 07       	cpc	r31, r25
 1a6:	d9 f7       	brne	.-10     	; 0x19e <LCD_AllSegments+0x8>
        *(LCD_Data + i) = show;
}
 1a8:	08 95       	ret

000001aa <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 1b6:	87 eb       	ldi	r24, 0xB7	; 183
 1b8:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 1c2:	e4 ee       	ldi	r30, 0xE4	; 228
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 ec       	ldi	r24, 0xC0	; 192
 1c8:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 1ca:	80 81       	ld	r24, Z
 1cc:	88 60       	ori	r24, 0x08	; 8
 1ce:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 1d0:	10 92 02 01 	sts	0x0102, r1


}
 1d4:	08 95       	ret

000001d6 <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
 1d6:	1f 92       	push	r1
 1d8:	0f 92       	push	r0
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	0f 92       	push	r0
 1de:	11 24       	eor	r1, r1
 1e0:	ef 92       	push	r14
 1e2:	ff 92       	push	r15
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	2f 93       	push	r18
 1ea:	3f 93       	push	r19
 1ec:	4f 93       	push	r20
 1ee:	5f 93       	push	r21
 1f0:	6f 93       	push	r22
 1f2:	7f 93       	push	r23
 1f4:	8f 93       	push	r24
 1f6:	9f 93       	push	r25
 1f8:	af 93       	push	r26
 1fa:	bf 93       	push	r27
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
        auto_joystick_count = 0;
*/

/**************** Auto press joystick for the main.c, END ***************/    

    LCD_timer--;                    // Decreased every LCD frame
 204:	00 91 00 01 	lds	r16, 0x0100
 208:	01 50       	subi	r16, 0x01	; 1
 20a:	00 93 00 01 	sts	0x0100, r16

    if (gScrollMode)
 20e:	80 91 06 01 	lds	r24, 0x0106
 212:	88 23       	and	r24, r24
 214:	71 f0       	breq	.+28     	; 0x232 <__vector_22+0x5c>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
 216:	00 23       	and	r16, r16
 218:	71 f4       	brne	.+28     	; 0x236 <__vector_22+0x60>
        {
            if (gLCD_Start_Scroll_Timer == 0)
 21a:	80 91 03 01 	lds	r24, 0x0103
 21e:	88 23       	and	r24, r24
 220:	21 f4       	brne	.+8      	; 0x22a <__vector_22+0x54>
            {
                gLCD_Update_Required = TRUE;
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	80 93 02 01 	sts	0x0102, r24
 228:	06 c0       	rjmp	.+12     	; 0x236 <__vector_22+0x60>
            }
            else
                gLCD_Start_Scroll_Timer--;
 22a:	81 50       	subi	r24, 0x01	; 1
 22c:	80 93 03 01 	sts	0x0103, r24
 230:	02 c0       	rjmp	.+4      	; 0x236 <__vector_22+0x60>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
 232:	10 92 34 01 	sts	0x0134, r1
    }


    EOL = FALSE;
    if (gLCD_Update_Required == TRUE)
 236:	80 91 02 01 	lds	r24, 0x0102
 23a:	81 30       	cpi	r24, 0x01	; 1
 23c:	09 f0       	breq	.+2      	; 0x240 <__vector_22+0x6a>
 23e:	53 c0       	rjmp	.+166    	; 0x2e6 <__vector_22+0x110>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
 240:	e0 90 04 01 	lds	r14, 0x0104
 244:	ff 24       	eor	r15, r15
 246:	10 e0       	ldi	r17, 0x00	; 0
 248:	c0 e0       	ldi	r28, 0x00	; 0
 24a:	d0 e0       	ldi	r29, 0x00	; 0
 24c:	6c 2f       	mov	r22, r28
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
        {
            if ((gScroll+i) >= 0 && (!EOL))
 24e:	80 91 34 01 	lds	r24, 0x0134
 252:	99 27       	eor	r25, r25
 254:	87 fd       	sbrc	r24, 7
 256:	90 95       	com	r25
 258:	8c 0f       	add	r24, r28
 25a:	9d 1f       	adc	r25, r29
 25c:	97 fd       	sbrc	r25, 7
 25e:	16 c0       	rjmp	.+44     	; 0x28c <__vector_22+0xb6>
 260:	11 23       	and	r17, r17
 262:	a1 f4       	brne	.+40     	; 0x28c <__vector_22+0xb6>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
 264:	80 91 34 01 	lds	r24, 0x0134
 268:	99 27       	eor	r25, r25
 26a:	87 fd       	sbrc	r24, 7
 26c:	90 95       	com	r25
 26e:	fe 01       	movw	r30, r28
 270:	e5 5e       	subi	r30, 0xE5	; 229
 272:	fe 4f       	sbci	r31, 0xFE	; 254
 274:	e8 0f       	add	r30, r24
 276:	f9 1f       	adc	r31, r25
 278:	80 81       	ld	r24, Z
                c_flash = c & 0x80 ? 1 : 0;
 27a:	f8 2e       	mov	r15, r24
 27c:	ff 1c       	adc	r15, r15
 27e:	ff 24       	eor	r15, r15
 280:	ff 1c       	adc	r15, r15
                c = c & 0x7F;
 282:	8f 77       	andi	r24, 0x7F	; 127

                if (c == '\0')
 284:	21 f4       	brne	.+8      	; 0x28e <__vector_22+0xb8>
 286:	1c 2f       	mov	r17, r28
 288:	1f 5f       	subi	r17, 0xFF	; 255
 28a:	01 c0       	rjmp	.+2      	; 0x28e <__vector_22+0xb8>
 28c:	80 e2       	ldi	r24, 0x20	; 32
            else
                c = ' ';

            // Check if this character is flashing

            if (c_flash && flash)
 28e:	ff 20       	and	r15, r15
 290:	21 f0       	breq	.+8      	; 0x29a <__vector_22+0xc4>
 292:	94 e0       	ldi	r25, 0x04	; 4
 294:	9e 15       	cp	r25, r14
 296:	08 f4       	brcc	.+2      	; 0x29a <__vector_22+0xc4>
                LCD_WriteDigit(' ', i);
 298:	80 e2       	ldi	r24, 0x20	; 32
            else
                LCD_WriteDigit(c, i);
 29a:	0e 94 91 00 	call	0x122	; 0x122 <LCD_WriteDigit>
 29e:	21 96       	adiw	r28, 0x01	; 1
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
 2a0:	c6 30       	cpi	r28, 0x06	; 6
 2a2:	d1 05       	cpc	r29, r1
 2a4:	99 f6       	brne	.-90     	; 0x24c <__vector_22+0x76>
 2a6:	ac ee       	ldi	r26, 0xEC	; 236
 2a8:	b0 e0       	ldi	r27, 0x00	; 0
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
            *(pLCDREG + i) = *(LCD_Data+i);
 2aa:	fd 01       	movw	r30, r26
 2ac:	e5 5e       	subi	r30, 0xE5	; 229
 2ae:	ff 4f       	sbci	r31, 0xFF	; 255
 2b0:	80 81       	ld	r24, Z
 2b2:	8d 93       	st	X+, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
 2b4:	81 e0       	ldi	r24, 0x01	; 1
 2b6:	a0 30       	cpi	r26, 0x00	; 0
 2b8:	b8 07       	cpc	r27, r24
 2ba:	b9 f7       	brne	.-18     	; 0x2aa <__vector_22+0xd4>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
 2bc:	80 91 05 01 	lds	r24, 0x0105
 2c0:	88 23       	and	r24, r24
 2c2:	21 f0       	breq	.+8      	; 0x2cc <__vector_22+0xf6>
            *(pLCDREG + 8) = 0x01;
 2c4:	81 e0       	ldi	r24, 0x01	; 1
 2c6:	80 93 f4 00 	sts	0x00F4, r24
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <__vector_22+0xfa>
        else
            *(pLCDREG + 8) = 0x00;
 2cc:	10 92 f4 00 	sts	0x00F4, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
 2d0:	11 30       	cpi	r17, 0x01	; 1
 2d2:	11 f4       	brne	.+4      	; 0x2d8 <__vector_22+0x102>
            gScroll = -6;
 2d4:	8a ef       	ldi	r24, 0xFA	; 250
 2d6:	03 c0       	rjmp	.+6      	; 0x2de <__vector_22+0x108>
        else
            gScroll++;
 2d8:	80 91 34 01 	lds	r24, 0x0134
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 34 01 	sts	0x0134, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
 2e2:	10 92 02 01 	sts	0x0102, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
 2e6:	00 23       	and	r16, r16
 2e8:	19 f4       	brne	.+6      	; 0x2f0 <__vector_22+0x11a>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
 2ea:	83 e0       	ldi	r24, 0x03	; 3
 2ec:	80 93 00 01 	sts	0x0100, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
 2f0:	80 91 04 01 	lds	r24, 0x0104
 2f4:	8a 30       	cpi	r24, 0x0A	; 10
 2f6:	19 f4       	brne	.+6      	; 0x2fe <__vector_22+0x128>
        gFlashTimer= 0;
 2f8:	10 92 04 01 	sts	0x0104, r1
 2fc:	03 c0       	rjmp	.+6      	; 0x304 <__vector_22+0x12e>
    else
        gFlashTimer++;
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 04 01 	sts	0x0104, r24

}
 304:	ff 91       	pop	r31
 306:	ef 91       	pop	r30
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	bf 91       	pop	r27
 30e:	af 91       	pop	r26
 310:	9f 91       	pop	r25
 312:	8f 91       	pop	r24
 314:	7f 91       	pop	r23
 316:	6f 91       	pop	r22
 318:	5f 91       	pop	r21
 31a:	4f 91       	pop	r20
 31c:	3f 91       	pop	r19
 31e:	2f 91       	pop	r18
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	0f 90       	pop	r0
 32a:	0f be       	out	0x3f, r0	; 63
 32c:	0f 90       	pop	r0
 32e:	1f 90       	pop	r1
 330:	18 95       	reti

00000332 <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
 332:	38 2f       	mov	r19, r24
 334:	29 2f       	mov	r18, r25
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 336:	80 91 02 01 	lds	r24, 0x0102
 33a:	88 23       	and	r24, r24
 33c:	e1 f7       	brne	.-8      	; 0x336 <LCD_puts_f+0x4>
 33e:	ab e1       	ldi	r26, 0x1B	; 27
 340:	b1 e0       	ldi	r27, 0x01	; 1
 342:	83 2f       	mov	r24, r19
 344:	92 2f       	mov	r25, r18
 346:	fc 01       	movw	r30, r24
 348:	01 c0       	rjmp	.+2      	; 0x34c <LCD_puts_f+0x1a>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 34a:	8d 93       	st	X+, r24
 34c:	9e 2f       	mov	r25, r30
 34e:	93 1b       	sub	r25, r19
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 350:	84 91       	lpm	r24, Z+
 352:	88 23       	and	r24, r24
 354:	29 f0       	breq	.+10     	; 0x360 <LCD_puts_f+0x2e>
 356:	31 96       	adiw	r30, 0x01	; 1
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	a4 33       	cpi	r26, 0x34	; 52
 35c:	b2 07       	cpc	r27, r18
 35e:	a9 f7       	brne	.-22     	; 0x34a <LCD_puts_f+0x18>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
 360:	e9 2f       	mov	r30, r25
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	e5 5e       	subi	r30, 0xE5	; 229
 366:	fe 4f       	sbci	r31, 0xFE	; 254
 368:	10 82       	st	Z, r1

    if (i > 6)
 36a:	97 30       	cpi	r25, 0x07	; 7
 36c:	48 f0       	brcs	.+18     	; 0x380 <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 06 01 	sts	0x0106, r24
        gScroll = 0;
 374:	10 92 34 01 	sts	0x0134, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 378:	83 e0       	ldi	r24, 0x03	; 3
 37a:	80 93 03 01 	sts	0x0103, r24
 37e:	04 c0       	rjmp	.+8      	; 0x388 <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 380:	10 92 06 01 	sts	0x0106, r1
        gScroll = 0;
 384:	10 92 34 01 	sts	0x0134, r1
    }

    gLCD_Update_Required = 1;
 388:	81 e0       	ldi	r24, 0x01	; 1
 38a:	80 93 02 01 	sts	0x0102, r24
}
 38e:	08 95       	ret

00000390 <LCD_puts>:
*
*	Purpose :		Writes a string to the LCD
*
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
 390:	48 2f       	mov	r20, r24
 392:	29 2f       	mov	r18, r25
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 394:	80 91 02 01 	lds	r24, 0x0102
 398:	88 23       	and	r24, r24
 39a:	e1 f7       	brne	.-8      	; 0x394 <LCD_puts+0x4>
 39c:	ab e1       	ldi	r26, 0x1B	; 27
 39e:	b1 e0       	ldi	r27, 0x01	; 1
 3a0:	84 2f       	mov	r24, r20
 3a2:	92 2f       	mov	r25, r18
 3a4:	9c 01       	movw	r18, r24
 3a6:	f9 01       	movw	r30, r18
 3a8:	01 c0       	rjmp	.+2      	; 0x3ac <LCD_puts+0x1c>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    {
        gTextBuffer[i] = pStr[i];
 3aa:	8d 93       	st	X+, r24
 3ac:	9e 2f       	mov	r25, r30
 3ae:	94 1b       	sub	r25, r20
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 3b0:	80 81       	ld	r24, Z
 3b2:	88 23       	and	r24, r24
 3b4:	29 f0       	breq	.+10     	; 0x3c0 <LCD_puts+0x30>
 3b6:	31 96       	adiw	r30, 0x01	; 1
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	a4 33       	cpi	r26, 0x34	; 52
 3bc:	b2 07       	cpc	r27, r18
 3be:	a9 f7       	brne	.-22     	; 0x3aa <LCD_puts+0x1a>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 3c0:	e9 2f       	mov	r30, r25
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	e5 5e       	subi	r30, 0xE5	; 229
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	10 82       	st	Z, r1

    if (i > 6)
 3ca:	97 30       	cpi	r25, 0x07	; 7
 3cc:	48 f0       	brcs	.+18     	; 0x3e0 <LCD_puts+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 93 06 01 	sts	0x0106, r24
        gScroll = 0;
 3d4:	10 92 34 01 	sts	0x0134, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	80 93 03 01 	sts	0x0103, r24
 3de:	04 c0       	rjmp	.+8      	; 0x3e8 <LCD_puts+0x58>
    }
    else
    {
        gScrollMode = 0;        
 3e0:	10 92 06 01 	sts	0x0106, r1
        gScroll = 0;
 3e4:	10 92 34 01 	sts	0x0134, r1
    }

    gLCD_Update_Required = 1;
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	80 93 02 01 	sts	0x0102, r24
}
 3ee:	08 95       	ret

000003f0 <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 3f0:	89 31       	cpi	r24, 0x19	; 25
 3f2:	28 f4       	brcc	.+10     	; 0x3fe <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 3f4:	e8 2f       	mov	r30, r24
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	e5 5e       	subi	r30, 0xE5	; 229
 3fa:	fe 4f       	sbci	r31, 0xFE	; 254
 3fc:	60 83       	st	Z, r22
 3fe:	08 95       	ret

00000400 <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 400:	eb e1       	ldi	r30, 0x1B	; 27
 402:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = '\0'; // JP changed from ' ' to stop LCD_puts_f buffer overrun
 404:	11 92       	st	Z+, r1
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	e4 33       	cpi	r30, 0x34	; 52
 40a:	f8 07       	cpc	r31, r24
 40c:	d9 f7       	brne	.-10     	; 0x404 <LCD_Clear+0x4>
        gTextBuffer[i] = '\0'; // JP changed from ' ' to stop LCD_puts_f buffer overrun
}
 40e:	08 95       	ret

00000410 <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 410:	80 93 05 01 	sts	0x0105, r24
}
 414:	08 95       	ret

00000416 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
 416:	98 2f       	mov	r25, r24

    while (gLCD_Update_Required);
 418:	80 91 02 01 	lds	r24, 0x0102
 41c:	88 23       	and	r24, r24
 41e:	e1 f7       	brne	.-8      	; 0x418 <LCD_UpdateRequired+0x2>
    
    gScrollMode = scrollmode;
 420:	60 93 06 01 	sts	0x0106, r22
    gScroll = 0;
 424:	10 92 34 01 	sts	0x0134, r1

    gLCD_Update_Required = update;
 428:	90 93 02 01 	sts	0x0102, r25
}
 42c:	08 95       	ret

0000042e <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 42e:	10 92 04 01 	sts	0x0104, r1
}
 432:	08 95       	ret

00000434 <SetContrast>:
*****************************************************************************/



void SetContrast(char input)
{
 434:	98 2f       	mov	r25, r24
 436:	eb e1       	ldi	r30, 0x1B	; 27
 438:	f1 e0       	ldi	r31, 0x01	; 1
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = '\0'; // JP changed from ' ' to stop LCD_puts_f buffer overrun
 43a:	11 92       	st	Z+, r1
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	e4 33       	cpi	r30, 0x34	; 52
 440:	f8 07       	cpc	r31, r24
 442:	d9 f7       	brne	.-10     	; 0x43a <SetContrast+0x6>
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
        gTextBuffer[digit] = character;
 444:	81 e4       	ldi	r24, 0x41	; 65
 446:	80 93 1b 01 	sts	0x011B, r24
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{

    while (gLCD_Update_Required);
 44a:	82 e4       	ldi	r24, 0x42	; 66
 44c:	80 93 1c 01 	sts	0x011C, r24
 450:	83 e4       	ldi	r24, 0x43	; 67
 452:	80 93 1d 01 	sts	0x011D, r24
 456:	84 e4       	ldi	r24, 0x44	; 68
 458:	80 93 1e 01 	sts	0x011E, r24
 45c:	85 e4       	ldi	r24, 0x45	; 69
 45e:	80 93 1f 01 	sts	0x011F, r24
 462:	86 e4       	ldi	r24, 0x46	; 70
 464:	80 93 20 01 	sts	0x0120, r24
 468:	80 91 02 01 	lds	r24, 0x0102
 46c:	88 23       	and	r24, r24
 46e:	e1 f7       	brne	.-8      	; 0x468 <SetContrast+0x34>
    
    gScrollMode = scrollmode;
 470:	10 92 06 01 	sts	0x0106, r1
    gScroll = 0;
 474:	10 92 34 01 	sts	0x0134, r1

    gLCD_Update_Required = update;
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	80 93 02 01 	sts	0x0102, r24
    LCD_putc(4, 'E');
    LCD_putc(5, 'F');

    LCD_UpdateRequired(TRUE, 0);

    LCD_CONTRAST_LEVEL(input);
 47e:	9f 70       	andi	r25, 0x0F	; 15
 480:	90 93 e7 00 	sts	0x00E7, r25

}
 484:	08 95       	ret

00000486 <_exit>:
 486:	f8 94       	cli

00000488 <__stop_program>:
 488:	ff cf       	rjmp	.-2      	; 0x488 <__stop_program>
