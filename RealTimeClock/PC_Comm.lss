
PC_Comm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002a  00800100  0000084e  000008e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080012a  0080012a  0000090c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000209  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e3  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e6  00000000  00000000  00001338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000083d  00000000  00000000  0000161e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000281  00000000  00000000  00001f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037c  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b8 00 	jmp	0x170	; 0x170 <__ctors_end>
   4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
   8:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
   c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  10:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  14:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_5>
  18:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  1c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  20:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  24:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  28:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  2c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  30:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  34:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  38:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  3c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  40:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  44:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  48:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  4c:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  50:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  54:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>
  58:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__bad_interrupt>

0000005c <TALKING_TO>:
  5c:	0d 59 6f 75 20 61 72 65 20 74 61 6c 6b 69 6e 67     .You are talking
  6c:	20 74 6f 20 74 68 65 20 00                           to the .

00000075 <WHO_DEMO>:
  75:	27 52 65 61 6c 20 54 69 6d 65 20 43 6c 6f 63 6b     'Real Time Clock
  85:	27 20 64 65 6d 6f 2e 0d 00                          ' demo...

0000008e <BAD_COMMAND1>:
  8e:	0d 59 6f 75 20 73 65 6e 74 3a 20 27 00              .You sent: '.

0000009b <BAD_COMMAND2>:
  9b:	27 20 2d 20 49 20 64 6f 6e 27 74 20 75 6e 64 65     ' - I don't unde
  ab:	72 73 74 61 6e 64 2e 0d 00                          rstand...

000000b4 <ENTER>:
  b4:	45 6e 74 65 72 20 00                                Enter .

000000bb <TEXT_GET>:
  bb:	27 67 65 74 27 20 74 6f 20 67 65 74 20 74 68 65     'get' to get the
  cb:	20 74 69 6d 65 20 61 6e 64 20 64 61 74 65 2e 0d      time and date..
	...

000000dc <TEXT_SEC>:
  dc:	27 73 65 63 58 58 27 20 74 6f 20 73 65 74 20 74     'secXX' to set t
  ec:	68 65 20 73 65 63 6f 6e 64 00                       he second.

000000f6 <TEXT_MIN>:
  f6:	27 6d 69 6e 58 58 27 20 74 6f 20 73 65 74 20 74     'minXX' to set t
 106:	68 65 20 6d 69 6e 75 74 65 00                       he minute.

00000110 <TEXT_HOUR>:
 110:	27 68 6f 75 72 58 58 27 20 74 6f 20 73 65 74 20     'hourXX' to set 
 120:	74 68 65 20 68 6f 75 72 00                          the hour.

00000129 <TEXT_TOXX>:
 129:	20 74 6f 20 58 58 2e 0d 00                           to XX...

00000132 <ERROR_NUMBER>:
 132:	0d 45 52 52 4f 52 20 2d 20 6e 75 6d 62 65 72 20     .ERROR - number 
 142:	6d 75 73 74 20 62 65 20 6c 65 73 73 20 74 68 61     must be less tha
 152:	6e 20 00                                            n .

00000155 <ERROR_60>:
 155:	20 36 30 2e 0d 00                                    60...

0000015b <ERROR_12>:
 15b:	20 31 32 2e 0d 00                                    12...

00000161 <THE_TIME_IS>:
 161:	54 68 65 20 74 69 6d 65 20 69 73 3a 20 00 00        The time is: ..

00000170 <__ctors_end>:
 170:	11 24       	eor	r1, r1
 172:	1f be       	out	0x3f, r1	; 63
 174:	cf ef       	ldi	r28, 0xFF	; 255
 176:	d4 e0       	ldi	r29, 0x04	; 4
 178:	de bf       	out	0x3e, r29	; 62
 17a:	cd bf       	out	0x3d, r28	; 61

0000017c <__do_copy_data>:
 17c:	11 e0       	ldi	r17, 0x01	; 1
 17e:	a0 e0       	ldi	r26, 0x00	; 0
 180:	b1 e0       	ldi	r27, 0x01	; 1
 182:	ee e4       	ldi	r30, 0x4E	; 78
 184:	f8 e0       	ldi	r31, 0x08	; 8
 186:	02 c0       	rjmp	.+4      	; 0x18c <.do_copy_data_start>

00000188 <.do_copy_data_loop>:
 188:	05 90       	lpm	r0, Z+
 18a:	0d 92       	st	X+, r0

0000018c <.do_copy_data_start>:
 18c:	aa 32       	cpi	r26, 0x2A	; 42
 18e:	b1 07       	cpc	r27, r17
 190:	d9 f7       	brne	.-10     	; 0x188 <.do_copy_data_loop>

00000192 <__do_clear_bss>:
 192:	11 e0       	ldi	r17, 0x01	; 1
 194:	aa e2       	ldi	r26, 0x2A	; 42
 196:	b1 e0       	ldi	r27, 0x01	; 1
 198:	01 c0       	rjmp	.+2      	; 0x19c <.do_clear_bss_start>

0000019a <.do_clear_bss_loop>:
 19a:	1d 92       	st	X+, r1

0000019c <.do_clear_bss_start>:
 19c:	ad 32       	cpi	r26, 0x2D	; 45
 19e:	b1 07       	cpc	r27, r17
 1a0:	e1 f7       	brne	.-8      	; 0x19a <.do_clear_bss_loop>
 1a2:	0e 94 ad 01 	call	0x35a	; 0x35a <main>
 1a6:	0c 94 25 04 	jmp	0x84a	; 0x84a <_exit>

000001aa <__bad_interrupt>:
 1aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ae <isCharAvailable>:

char isCharAvailable()
{	
	// Does the RX0 bit of the USART Status and Control Register
	// indicate a char has been received?
	if ( (UCSR0A & (0x80)) ) return 1;
 1ae:	80 91 c0 00 	lds	r24, 0x00C0
	else return 0;
}
 1b2:	88 1f       	adc	r24, r24
 1b4:	88 27       	eor	r24, r24
 1b6:	88 1f       	adc	r24, r24
 1b8:	08 95       	ret

000001ba <receiveChar>:

char receiveChar()
{
	// Return the char in the UDR0 register
	return UDR0;
 1ba:	80 91 c6 00 	lds	r24, 0x00C6
}
 1be:	08 95       	ret

000001c0 <sendChar>:
void sendChar(char data)
{
    int i = 0;

    // To send data with the USART put the data in the USART data register 
    UDR0 = data;
 1c0:	80 93 c6 00 	sts	0x00C6, r24

    // Check to see if the global interrupts are enabled
    if(SREG & 0x80)
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	07 fe       	sbrs	r0, 7
 1c8:	0e c0       	rjmp	.+28     	; 0x1e6 <sendChar+0x26>
 1ca:	20 e0       	ldi	r18, 0x00	; 0
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <sendChar+0x14>
    {
	// Wait until the byte is sent or we count out
		while ( !(UCSR0A&0x40) && (i<10000) )
		{
			i++;
 1d0:	2f 5f       	subi	r18, 0xFF	; 255
 1d2:	3f 4f       	sbci	r19, 0xFF	; 255

    // Check to see if the global interrupts are enabled
    if(SREG & 0x80)
    {
	// Wait until the byte is sent or we count out
		while ( !(UCSR0A&0x40) && (i<10000) )
 1d4:	80 91 c0 00 	lds	r24, 0x00C0
 1d8:	86 fd       	sbrc	r24, 6
 1da:	09 c0       	rjmp	.+18     	; 0x1ee <sendChar+0x2e>
 1dc:	87 e2       	ldi	r24, 0x27	; 39
 1de:	20 31       	cpi	r18, 0x10	; 16
 1e0:	38 07       	cpc	r19, r24
 1e2:	b1 f7       	brne	.-20     	; 0x1d0 <sendChar+0x10>
 1e4:	04 c0       	rjmp	.+8      	; 0x1ee <sendChar+0x2e>
		{
			i++;
		}
    }
    else  // Wait until the byte is sent
        while( !(UCSR0A&0x40) );
 1e6:	80 91 c0 00 	lds	r24, 0x00C0
 1ea:	86 ff       	sbrs	r24, 6
 1ec:	fc cf       	rjmp	.-8      	; 0x1e6 <sendChar+0x26>
        
    	// Clear the TXCflag        
	UCSR0A=UCSR0A|0x40;          
 1ee:	80 91 c0 00 	lds	r24, 0x00C0
 1f2:	80 64       	ori	r24, 0x40	; 64
 1f4:	80 93 c0 00 	sts	0x00C0, r24
}
 1f8:	08 95       	ret

000001fa <sendString>:

void sendString(char s[])
{
 1fa:	0f 93       	push	r16
 1fc:	1f 93       	push	r17
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	8c 01       	movw	r16, r24
 204:	c0 e0       	ldi	r28, 0x00	; 0
 206:	d0 e0       	ldi	r29, 0x00	; 0
	int i = 0;
	
	while(i < 64) // don't get stuck if it is a bad string
	{
		if( s[i] == '\0' ) break; // quit on string terminator
 208:	f8 01       	movw	r30, r16
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	31 f0       	breq	.+12     	; 0x220 <sendString+0x26>
		sendChar(s[i++]);
 214:	21 96       	adiw	r28, 0x01	; 1
 216:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>

void sendString(char s[])
{
	int i = 0;
	
	while(i < 64) // don't get stuck if it is a bad string
 21a:	c0 34       	cpi	r28, 0x40	; 64
 21c:	d1 05       	cpc	r29, r1
 21e:	a1 f7       	brne	.-24     	; 0x208 <sendString+0xe>
	{
		if( s[i] == '\0' ) break; // quit on string terminator
		sendChar(s[i++]);
	}
}
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	1f 91       	pop	r17
 226:	0f 91       	pop	r16
 228:	08 95       	ret

0000022a <sendFString>:

// Send a string located in Flash ROM
void sendFString(const char *pFlashStr)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	8c 01       	movw	r16, r24
 234:	c0 e0       	ldi	r28, 0x00	; 0
 236:	d0 e0       	ldi	r29, 0x00	; 0
 238:	02 c0       	rjmp	.+4      	; 0x23e <sendFString+0x14>
	// '\0' is 'null' and terminates C strings
	// The 60 prevents too much overrun if we get a bad pointer
	// and it limits the string size
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < 60; i++)
    {
		sendChar(pgm_read_byte(&pFlashStr[i]));
 23a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
 23e:	f8 01       	movw	r30, r16
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29

	// The 'for' logic terminates if the byte is '\0' or if i = 60.
	// '\0' is 'null' and terminates C strings
	// The 60 prevents too much overrun if we get a bad pointer
	// and it limits the string size
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < 60; i++)
 244:	84 91       	lpm	r24, Z+
 246:	88 23       	and	r24, r24
 248:	21 f0       	breq	.+8      	; 0x252 <sendFString+0x28>
 24a:	21 96       	adiw	r28, 0x01	; 1
 24c:	cd 33       	cpi	r28, 0x3D	; 61
 24e:	d1 05       	cpc	r29, r1
 250:	a1 f7       	brne	.-24     	; 0x23a <sendFString+0x10>
    {
		sendChar(pgm_read_byte(&pFlashStr[i]));
	}
}
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	1f 91       	pop	r17
 258:	0f 91       	pop	r16
 25a:	08 95       	ret

0000025c <USARTinit>:


void USARTinit()
{
    // Increase the oscillator to 2 Mhz for the 19200 baudrate:  
    CLKPR = (1<<CLKPCE);        // set Clock Prescaler Change Enable
 25c:	e1 e6       	ldi	r30, 0x61	; 97
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	80 83       	st	Z, r24
    // set prescaler = 4, Inter RC 8Mhz / 4 = 2Mhz
    CLKPR = (1<<CLKPS1);    
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	90 83       	st	Z, r25

    // Set the USART baudrate registers for 19200
    UBRR0H = 0;//(unsigned char)(baudrate>>8);
 268:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = 12;//(unsigned char)baudrate;
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	80 93 c4 00 	sts	0x00C4, r24

    // Enable 2x speed change
    UCSR0A = (1<<U2X0);
 272:	90 93 c0 00 	sts	0x00C0, r25

    // Enable receiver and transmitter
    UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(0<<RXCIE0)|(0<<UDRIE0);
 276:	88 e1       	ldi	r24, 0x18	; 24
 278:	80 93 c1 00 	sts	0x00C1, r24

    // Set the USART to asynchronous at 8 bits no parity and 1 stop bit
    UCSR0C = (0<<UMSEL0)|(0<<UPM00)|(0<<USBS0)|(3<<UCSZ00)|(0<<UCPOL0);
 27c:	86 e0       	ldi	r24, 0x06	; 6
 27e:	80 93 c2 00 	sts	0x00C2, r24
        
    // Enable interrupts
    sei(); 
 282:	78 94       	sei
    
    // Setup the interrupt mask and flags
	PCMSK1 = (1<<PINB6) | (1<<PINB4);       // set pin-change interrupt mask
 284:	80 e5       	ldi	r24, 0x50	; 80
 286:	80 93 6c 00 	sts	0x006C, r24
  	EIFR   = (1<<PCIF1);                    // clear external intterupt flag 1
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	8c bb       	out	0x1c, r24	; 28
	EIMSK  = (1<<PCIE1);                // enable external interrupt 1    
 28e:	8d bb       	out	0x1d, r24	; 29
}
 290:	08 95       	ret

00000292 <OSCCAL_calibration>:
{
    unsigned char calibrate = 0;//FALSE;
    int temp;
    unsigned char tempL;

    CLKPR = (1<<CLKPCE);        // set Clock Prescaler Change Enable
 292:	80 e8       	ldi	r24, 0x80	; 128
 294:	80 93 61 00 	sts	0x0061, r24
    // set prescaler = 8, Inter RC 8Mhz / 8 = 1Mhz
    CLKPR = (1<<CLKPS1) | (1<<CLKPS0);
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	80 93 61 00 	sts	0x0061, r24
    
    TIMSK2 = 0;             //disable OCIE2A and TOIE2
 29e:	10 92 70 00 	sts	0x0070, r1

    ASSR = (1<<AS2);        //select asynchronous operation of timer2 (32,768kHz)
 2a2:	88 e0       	ldi	r24, 0x08	; 8
 2a4:	80 93 b6 00 	sts	0x00B6, r24
    
    OCR2A = 200;            // set timer2 compare value 
 2a8:	88 ec       	ldi	r24, 0xC8	; 200
 2aa:	80 93 b3 00 	sts	0x00B3, r24

    TIMSK0 = 0;             // delete any interrupt sources
 2ae:	10 92 6e 00 	sts	0x006E, r1
        
    TCCR1B = (1<<CS10);     // start timer1 with no prescaling
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	80 93 81 00 	sts	0x0081, r24
    TCCR2A = (1<<CS20);     // start timer2 with no prescaling
 2b8:	80 93 b0 00 	sts	0x00B0, r24

    while((ASSR & 0x01) | (ASSR & 0x04));       //wait for TCN2UB and TCR2UB to be cleared
 2bc:	20 91 b6 00 	lds	r18, 0x00B6
 2c0:	80 91 b6 00 	lds	r24, 0x00B6
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	84 70       	andi	r24, 0x04	; 4
 2c8:	90 70       	andi	r25, 0x00	; 0
 2ca:	30 e0       	ldi	r19, 0x00	; 0
 2cc:	21 70       	andi	r18, 0x01	; 1
 2ce:	30 70       	andi	r19, 0x00	; 0
 2d0:	82 2b       	or	r24, r18
 2d2:	93 2b       	or	r25, r19
 2d4:	89 2b       	or	r24, r25
 2d6:	91 f7       	brne	.-28     	; 0x2bc <OSCCAL_calibration+0x2a>
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	90 e0       	ldi	r25, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2dc:	20 e3       	ldi	r18, 0x30	; 48
 2de:	35 e7       	ldi	r19, 0x75	; 117
 2e0:	f9 01       	movw	r30, r18
 2e2:	31 97       	sbiw	r30, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <OSCCAL_calibration+0x50>

    // wait for external crystal to stabilise
	for(int i = 0; i < 10; i++)
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	8a 30       	cpi	r24, 0x0A	; 10
 2ea:	91 05       	cpc	r25, r1
 2ec:	c9 f7       	brne	.-14     	; 0x2e0 <OSCCAL_calibration+0x4e>
			
    while(!calibrate)
    {
        cli(); // mt __disable_interrupt();  // disable global interrupt
        
        TIFR1 = 0xFF;   // delete TIFR1 flags
 2ee:	4f ef       	ldi	r20, 0xFF	; 255
    
        if (temp > 6250)
        {
            OSCCAL--;   // the internRC oscillator runs to fast, decrease the OSCCAL
        }
        else if (temp < 6120)
 2f0:	51 e0       	ldi	r21, 0x01	; 1
	for(int i = 0; i < 10; i++)
			_delay_loop_2(30000);   
			
    while(!calibrate)
    {
        cli(); // mt __disable_interrupt();  // disable global interrupt
 2f2:	f8 94       	cli
        
        TIFR1 = 0xFF;   // delete TIFR1 flags
 2f4:	46 bb       	out	0x16, r20	; 22
        TIFR2 = 0xFF;   // delete TIFR2 flags
 2f6:	47 bb       	out	0x17, r20	; 23
        
        TCNT1H = 0;     // clear timer1 counter
 2f8:	10 92 85 00 	sts	0x0085, r1
        TCNT1L = 0;
 2fc:	10 92 84 00 	sts	0x0084, r1
        TCNT2 = 0;      // clear timer2 counter
 300:	10 92 b2 00 	sts	0x00B2, r1
           
        while ( !(TIFR2 && (1<<OCF2A)) );   // wait for timer2 compareflag
 304:	87 b3       	in	r24, 0x17	; 23
 306:	88 23       	and	r24, r24
 308:	e9 f3       	breq	.-6      	; 0x304 <OSCCAL_calibration+0x72>
    
        TCCR1B = 0; // stop timer1
 30a:	10 92 81 00 	sts	0x0081, r1

        sei(); // __enable_interrupt();  // enable global interrupt
 30e:	78 94       	sei
    
        if ( (TIFR1 && (1<<TOV1)) )
 310:	86 b3       	in	r24, 0x16	; 22
 312:	88 23       	and	r24, r24
 314:	b9 f4       	brne	.+46     	; 0x344 <OSCCAL_calibration+0xb2>
        {
            temp = 0xFFFF;      // if timer1 overflows, set the temp to 0xFFFF
        }
        else
        {   // read out the timer1 counter value
            tempL = TCNT1L;
 316:	90 91 84 00 	lds	r25, 0x0084
            temp = TCNT1H;
 31a:	80 91 85 00 	lds	r24, 0x0085
            temp = (temp << 8);
 31e:	38 2f       	mov	r19, r24
 320:	20 e0       	ldi	r18, 0x00	; 0
            temp += tempL;
 322:	b9 01       	movw	r22, r18
 324:	69 0f       	add	r22, r25
 326:	71 1d       	adc	r23, r1
 328:	cb 01       	movw	r24, r22
        }
    
        if (temp > 6250)
 32a:	78 e1       	ldi	r23, 0x18	; 24
 32c:	8b 36       	cpi	r24, 0x6B	; 107
 32e:	97 07       	cpc	r25, r23
 330:	24 f0       	brlt	.+8      	; 0x33a <OSCCAL_calibration+0xa8>
        {
            OSCCAL--;   // the internRC oscillator runs to fast, decrease the OSCCAL
 332:	80 91 66 00 	lds	r24, 0x0066
 336:	81 50       	subi	r24, 0x01	; 1
 338:	08 c0       	rjmp	.+16     	; 0x34a <OSCCAL_calibration+0xb8>
        }
        else if (temp < 6120)
 33a:	88 5e       	subi	r24, 0xE8	; 232
 33c:	97 41       	sbci	r25, 0x17	; 23
 33e:	14 f0       	brlt	.+4      	; 0x344 <OSCCAL_calibration+0xb2>
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	06 c0       	rjmp	.+12     	; 0x350 <OSCCAL_calibration+0xbe>
        {
            OSCCAL++;   // the internRC oscillator runs to slow, increase the OSCCAL
 344:	80 91 66 00 	lds	r24, 0x0066
 348:	8f 5f       	subi	r24, 0xFF	; 255
 34a:	80 93 66 00 	sts	0x0066, r24
 34e:	80 e0       	ldi	r24, 0x00	; 0
        }
        else
            calibrate = 1;//TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); // start timer1
 350:	50 93 81 00 	sts	0x0081, r21

    // wait for external crystal to stabilise
	for(int i = 0; i < 10; i++)
			_delay_loop_2(30000);   
			
    while(!calibrate)
 354:	88 23       	and	r24, r24
 356:	69 f2       	breq	.-102    	; 0x2f2 <OSCCAL_calibration+0x60>
        else
            calibrate = 1;//TRUE;   // the interRC is correct
    
        TCCR1B = (1<<CS10); // start timer1
    }
}
 358:	08 95       	ret

0000035a <main>:
#include "PC_Comm.h"
#include <avr/io.h>


int main(void)
{	
 35a:	ef 92       	push	r14
 35c:	ff 92       	push	r15
 35e:	0f 93       	push	r16
 360:	1f 93       	push	r17
 362:	df 93       	push	r29
 364:	cf 93       	push	r28
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	c0 54       	subi	r28, 0x40	; 64
 36c:	d0 40       	sbci	r29, 0x00	; 0
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
	
	char string[64];
	unsigned char count = 0;
	
	// run the initialization routines
	initializer();
 378:	0e 94 b1 03 	call	0x762	; 0x762 <initializer>
 37c:	90 e0       	ldi	r25, 0x00	; 0
	 {	
		// Check to see if a character is waiting
		if( isCharAvailable() == 1 )
		{
			// If a new character is received, get it
			string[count++] = receiveChar();
 37e:	8e 01       	movw	r16, r28
 380:	0f 5f       	subi	r16, 0xFF	; 255
 382:	1f 4f       	sbci	r17, 0xFF	; 255
			
			// receive a packet up to 64 bytes long
			if(string[count-1] == '\n')// Hyperterminal string ends with \r\n
			{	
				string[count-2] = '\0'; //convert to a string
 384:	7e 01       	movw	r14, r28
 386:	08 94       	sec
 388:	e1 08       	sbc	r14, r1
 38a:	f1 08       	sbc	r15, r1

char isCharAvailable()
{	
	// Does the RX0 bit of the USART Status and Control Register
	// indicate a char has been received?
	if ( (UCSR0A & (0x80)) ) return 1;
 38c:	80 91 c0 00 	lds	r24, 0x00C0
 390:	87 ff       	sbrs	r24, 7
 392:	fc cf       	rjmp	.-8      	; 0x38c <main+0x32>
}

char receiveChar()
{
	// Return the char in the UDR0 register
	return UDR0;
 394:	80 91 c6 00 	lds	r24, 0x00C6
	 {	
		// Check to see if a character is waiting
		if( isCharAvailable() == 1 )
		{
			// If a new character is received, get it
			string[count++] = receiveChar();
 398:	f8 01       	movw	r30, r16
 39a:	e9 0f       	add	r30, r25
 39c:	f1 1d       	adc	r31, r1
 39e:	80 83       	st	Z, r24
 3a0:	9f 5f       	subi	r25, 0xFF	; 255
			
			// receive a packet up to 64 bytes long
			if(string[count-1] == '\n')// Hyperterminal string ends with \r\n
 3a2:	a9 2f       	mov	r26, r25
 3a4:	b0 e0       	ldi	r27, 0x00	; 0
 3a6:	fe 01       	movw	r30, r28
 3a8:	ea 0f       	add	r30, r26
 3aa:	fb 1f       	adc	r31, r27
 3ac:	80 81       	ld	r24, Z
 3ae:	8a 30       	cpi	r24, 0x0A	; 10
 3b0:	41 f4       	brne	.+16     	; 0x3c2 <main+0x68>
			{	
				string[count-2] = '\0'; //convert to a string
 3b2:	ae 0d       	add	r26, r14
 3b4:	bf 1d       	adc	r27, r15
 3b6:	1c 92       	st	X, r1
				parseInput(string);
 3b8:	c8 01       	movw	r24, r16
 3ba:	0e 94 4f 03 	call	0x69e	; 0x69e <parseInput>
				string[0] = '\0';
 3be:	19 82       	std	Y+1, r1	; 0x01
 3c0:	07 c0       	rjmp	.+14     	; 0x3d0 <main+0x76>
				count = 0;
			}
			else if(count > 64)
 3c2:	91 34       	cpi	r25, 0x41	; 65
 3c4:	18 f3       	brcs	.-58     	; 0x38c <main+0x32>
			{
				count = 0;
				string[0] = '\0';
 3c6:	19 82       	std	Y+1, r1	; 0x01
				sendString("Error - received > 64 characters");			
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <sendString>
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	dc cf       	rjmp	.-72     	; 0x38c <main+0x32>

000003d4 <CHAR2BCD2>:
}

// convert a character into a binary coded decimal chracter in the range 0 to 99
// resulting byte has tens in high nibble and ones in low nibble
char CHAR2BCD2(char input)
{
 3d4:	48 2f       	mov	r20, r24
 3d6:	6a e0       	ldi	r22, 0x0A	; 10
 3d8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	84 e0       	ldi	r24, 0x04	; 4
 3e2:	22 0f       	add	r18, r18
 3e4:	33 1f       	adc	r19, r19
 3e6:	8a 95       	dec	r24
 3e8:	e1 f7       	brne	.-8      	; 0x3e2 <CHAR2BCD2+0xe>
 3ea:	84 2f       	mov	r24, r20
 3ec:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 3f0:	89 2f       	mov	r24, r25
 3f2:	82 2b       	or	r24, r18
 3f4:	08 95       	ret

000003f6 <RTC_init>:



// initialize Timer/counter2 as asynchronous using the 32.768kHz watch crystal.
void RTC_init(void)
{
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	20 e3       	ldi	r18, 0x30	; 48
 3fc:	35 e7       	ldi	r19, 0x75	; 117
 3fe:	f9 01       	movw	r30, r18
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <RTC_init+0xa>
     // wait for external crystal to stabilise
	for(int i = 0; i < 10; i++)
 404:	01 96       	adiw	r24, 0x01	; 1
 406:	8a 30       	cpi	r24, 0x0A	; 10
 408:	91 05       	cpc	r25, r1
 40a:	c9 f7       	brne	.-14     	; 0x3fe <RTC_init+0x8>
			_delay_loop_2(30000);   
			
    cli();					// disabel global interrupt
 40c:	f8 94       	cli

    cbi(TIMSK2, TOIE2);		// disable OCIE2A and TOIE2
 40e:	80 91 70 00 	lds	r24, 0x0070
 412:	8e 7f       	andi	r24, 0xFE	; 254
 414:	80 93 70 00 	sts	0x0070, r24

    ASSR = (1<<AS2);		// select asynchronous operation of Timer2
 418:	88 e0       	ldi	r24, 0x08	; 8
 41a:	80 93 b6 00 	sts	0x00B6, r24

    TCNT2 = 0;				// clear TCNT2A
 41e:	10 92 b2 00 	sts	0x00B2, r1
	
	// select precaler: 32.768 kHz / 128 = 1 sec between each overflow
    TCCR2A |= (1<<CS22) | (1<<CS20);
 422:	80 91 b0 00 	lds	r24, 0x00B0
 426:	85 60       	ori	r24, 0x05	; 5
 428:	80 93 b0 00 	sts	0x00B0, r24
	
	// wait for TCN2UB and TCR2UB to be cleared
    while((ASSR & 0x01) | (ASSR & 0x04));	
 42c:	20 91 b6 00 	lds	r18, 0x00B6
 430:	80 91 b6 00 	lds	r24, 0x00B6
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	84 70       	andi	r24, 0x04	; 4
 438:	90 70       	andi	r25, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	21 70       	andi	r18, 0x01	; 1
 43e:	30 70       	andi	r19, 0x00	; 0
 440:	82 2b       	or	r24, r18
 442:	93 2b       	or	r25, r19
 444:	89 2b       	or	r24, r25
 446:	91 f7       	brne	.-28     	; 0x42c <RTC_init+0x36>

    TIFR2 = 0xFF;			// clear interrupt-flags
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	87 bb       	out	0x17, r24	; 23
    sbi(TIMSK2, TOIE2);		// enable Timer2 overflow interrupt
 44c:	80 91 70 00 	lds	r24, 0x0070
 450:	81 60       	ori	r24, 0x01	; 1
 452:	80 93 70 00 	sts	0x0070, r24

    sei();					// enable global interrupt
 456:	78 94       	sei

    // initial time and date setting
    gSECOND  = 0;
 458:	10 92 2b 01 	sts	0x012B, r1
    gMINUTE  = 0;
 45c:	10 92 2c 01 	sts	0x012C, r1
    gHOUR    = 0;
 460:	10 92 2a 01 	sts	0x012A, r1
}
 464:	08 95       	ret

00000466 <__vector_5>:

// one second interrupt from 32kHz watch crystal
SIGNAL(SIG_OVERFLOW2)
{
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	0f 92       	push	r0
 46e:	11 24       	eor	r1, r1
 470:	8f 93       	push	r24
    gSECOND++;		// increment second
 472:	80 91 2b 01 	lds	r24, 0x012B
 476:	8f 5f       	subi	r24, 0xFF	; 255
 478:	80 93 2b 01 	sts	0x012B, r24

    if (gSECOND == 60)
 47c:	8c 33       	cpi	r24, 0x3C	; 60
 47e:	a1 f4       	brne	.+40     	; 0x4a8 <__vector_5+0x42>
    {
        gSECOND = 0;
 480:	10 92 2b 01 	sts	0x012B, r1
        gMINUTE++;		// increment minute
 484:	80 91 2c 01 	lds	r24, 0x012C
 488:	8f 5f       	subi	r24, 0xFF	; 255
 48a:	80 93 2c 01 	sts	0x012C, r24
        
        if (gMINUTE > 59)
 48e:	8c 33       	cpi	r24, 0x3C	; 60
 490:	58 f0       	brcs	.+22     	; 0x4a8 <__vector_5+0x42>
        {
            gMINUTE = 0;
 492:	10 92 2c 01 	sts	0x012C, r1
            gHOUR++;	// increment hour
 496:	80 91 2a 01 	lds	r24, 0x012A
 49a:	8f 5f       	subi	r24, 0xFF	; 255
 49c:	80 93 2a 01 	sts	0x012A, r24
            
            if (gHOUR > 12)
 4a0:	8d 30       	cpi	r24, 0x0D	; 13
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__vector_5+0x42>
            {             
                gHOUR = 0;
 4a4:	10 92 2a 01 	sts	0x012A, r1
			}
        }
    }
}
 4a8:	8f 91       	pop	r24
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <showClock>:
		sendFString(ERROR_12);
	}
}

void showClock(void)
{
 4b4:	ef 92       	push	r14
 4b6:	ff 92       	push	r15
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
	uint8_t HH, HL, MH, ML, SH, SL;

    HH = CHAR2BCD2(gHOUR);   
 4bc:	40 91 2a 01 	lds	r20, 0x012A
    {
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
 4c0:	84 2f       	mov	r24, r20
 4c2:	6a e0       	ldi	r22, 0x0A	; 10
 4c4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	e4 e0       	ldi	r30, 0x04	; 4
 4ce:	22 0f       	add	r18, r18
 4d0:	33 1f       	adc	r19, r19
 4d2:	ea 95       	dec	r30
 4d4:	e1 f7       	brne	.-8      	; 0x4ce <showClock+0x1a>
 4d6:	84 2f       	mov	r24, r20
 4d8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 4dc:	f9 2e       	mov	r15, r25
 4de:	f2 2a       	or	r15, r18
    HH = CHAR2BCD2(gHOUR);   
        
    HL = (HH & 0x0F) + '0';
    HH = (HH >> 4) + '0';

    MH = CHAR2BCD2(gMINUTE);
 4e0:	40 91 2c 01 	lds	r20, 0x012C
    {
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
 4e4:	84 2f       	mov	r24, r20
 4e6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 4ea:	28 2f       	mov	r18, r24
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	74 e0       	ldi	r23, 0x04	; 4
 4f0:	22 0f       	add	r18, r18
 4f2:	33 1f       	adc	r19, r19
 4f4:	7a 95       	dec	r23
 4f6:	e1 f7       	brne	.-8      	; 0x4f0 <showClock+0x3c>
 4f8:	84 2f       	mov	r24, r20
 4fa:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 4fe:	09 2f       	mov	r16, r25
 500:	02 2b       	or	r16, r18

    MH = CHAR2BCD2(gMINUTE);
    ML = (MH & 0x0F) + '0';
    MH = (MH >> 4) + '0';

    SH = CHAR2BCD2(gSECOND);
 502:	40 91 2b 01 	lds	r20, 0x012B
    {
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
 506:	84 2f       	mov	r24, r20
 508:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	54 e0       	ldi	r21, 0x04	; 4
 512:	22 0f       	add	r18, r18
 514:	33 1f       	adc	r19, r19
 516:	5a 95       	dec	r21
 518:	e1 f7       	brne	.-8      	; 0x512 <__stack+0x13>
 51a:	84 2f       	mov	r24, r20
 51c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__udivmodqi4>
 520:	19 2f       	mov	r17, r25
 522:	12 2b       	or	r17, r18
    ML = (MH & 0x0F) + '0';
    MH = (MH >> 4) + '0';

    SH = CHAR2BCD2(gSECOND);
    SL = (SH & 0x0F) + '0';
    SH = (SH >> 4) + '0';
 524:	e1 2e       	mov	r14, r17
 526:	e2 94       	swap	r14
 528:	9f e0       	ldi	r25, 0x0F	; 15
 52a:	e9 22       	and	r14, r25

	sendFString(THE_TIME_IS);
 52c:	81 e6       	ldi	r24, 0x61	; 97
 52e:	91 e0       	ldi	r25, 0x01	; 1
 530:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	uint8_t HH, HL, MH, ML, SH, SL;

    HH = CHAR2BCD2(gHOUR);   
        
    HL = (HH & 0x0F) + '0';
    HH = (HH >> 4) + '0';
 534:	8f 2d       	mov	r24, r15
 536:	82 95       	swap	r24
 538:	8f 70       	andi	r24, 0x0F	; 15
    SH = CHAR2BCD2(gSECOND);
    SL = (SH & 0x0F) + '0';
    SH = (SH >> 4) + '0';

	sendFString(THE_TIME_IS);
	sendChar(HH);
 53a:	80 5d       	subi	r24, 0xD0	; 208
 53c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar(HL);
 540:	8f e0       	ldi	r24, 0x0F	; 15
 542:	f8 22       	and	r15, r24
 544:	8f 2d       	mov	r24, r15
 546:	80 5d       	subi	r24, 0xD0	; 208
 548:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar(':');
 54c:	8a e3       	ldi	r24, 0x3A	; 58
 54e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
    HL = (HH & 0x0F) + '0';
    HH = (HH >> 4) + '0';

    MH = CHAR2BCD2(gMINUTE);
    ML = (MH & 0x0F) + '0';
    MH = (MH >> 4) + '0';
 552:	80 2f       	mov	r24, r16
 554:	82 95       	swap	r24
 556:	8f 70       	andi	r24, 0x0F	; 15

	sendFString(THE_TIME_IS);
	sendChar(HH);
	sendChar(HL);
	sendChar(':');
	sendChar(MH);
 558:	80 5d       	subi	r24, 0xD0	; 208
 55a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar(ML);
 55e:	0f 70       	andi	r16, 0x0F	; 15
 560:	80 2f       	mov	r24, r16
 562:	80 5d       	subi	r24, 0xD0	; 208
 564:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar(':');
 568:	8a e3       	ldi	r24, 0x3A	; 58
 56a:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar(SH);
 56e:	8e 2d       	mov	r24, r14
 570:	80 5d       	subi	r24, 0xD0	; 208
 572:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar(SL);
 576:	1f 70       	andi	r17, 0x0F	; 15
 578:	81 2f       	mov	r24, r17
 57a:	80 5d       	subi	r24, 0xD0	; 208
 57c:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	sendChar('\r');
 580:	8d e0       	ldi	r24, 0x0D	; 13
 582:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
	
 
}
 586:	1f 91       	pop	r17
 588:	0f 91       	pop	r16
 58a:	ff 90       	pop	r15
 58c:	ef 90       	pop	r14
 58e:	08 95       	ret

00000590 <setHour>:
		sendFString(ERROR_60);
	}
}

void setHour(char s[])
{
 590:	df 93       	push	r29
 592:	cf 93       	push	r28
 594:	00 d0       	rcall	.+0      	; 0x596 <setHour+0x6>
 596:	0f 92       	push	r0
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	9c 01       	movw	r18, r24
	char str[] = {0,0,'\0'};
 59e:	de 01       	movw	r26, r28
 5a0:	11 96       	adiw	r26, 0x01	; 1
 5a2:	e1 e2       	ldi	r30, 0x21	; 33
 5a4:	f1 e0       	ldi	r31, 0x01	; 1
 5a6:	83 e0       	ldi	r24, 0x03	; 3
 5a8:	01 90       	ld	r0, Z+
 5aa:	0d 92       	st	X+, r0
 5ac:	81 50       	subi	r24, 0x01	; 1
 5ae:	e1 f7       	brne	.-8      	; 0x5a8 <setHour+0x18>
	int hour;
	
	str[0] = s[4];
 5b0:	f9 01       	movw	r30, r18
 5b2:	84 81       	ldd	r24, Z+4	; 0x04
 5b4:	89 83       	std	Y+1, r24	; 0x01
	str[1] = s[5];
 5b6:	85 81       	ldd	r24, Z+5	; 0x05
 5b8:	8a 83       	std	Y+2, r24	; 0x02
	
	hour = atoi(str);
 5ba:	ce 01       	movw	r24, r28
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	0e 94 ff 03 	call	0x7fe	; 0x7fe <atoi>
	if( hour <= 12)
 5c2:	8d 30       	cpi	r24, 0x0D	; 13
 5c4:	91 05       	cpc	r25, r1
 5c6:	1c f4       	brge	.+6      	; 0x5ce <setHour+0x3e>
	{
		gHOUR = (uint8_t)hour;
 5c8:	80 93 2a 01 	sts	0x012A, r24
 5cc:	08 c0       	rjmp	.+16     	; 0x5de <setHour+0x4e>
	}
	else
	{
		sendFString(ERROR_NUMBER);
 5ce:	82 e3       	ldi	r24, 0x32	; 50
 5d0:	91 e0       	ldi	r25, 0x01	; 1
 5d2:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
		sendFString(ERROR_12);
 5d6:	8b e5       	ldi	r24, 0x5B	; 91
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	}
}
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	cf 91       	pop	r28
 5e6:	df 91       	pop	r29
 5e8:	08 95       	ret

000005ea <setMinute>:
		sendFString(ERROR_60);
	}
}

void setMinute(char s[])
{
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <setMinute+0x6>
 5f0:	0f 92       	push	r0
 5f2:	cd b7       	in	r28, 0x3d	; 61
 5f4:	de b7       	in	r29, 0x3e	; 62
 5f6:	9c 01       	movw	r18, r24
	char str[] = {0,0,'\0'};
 5f8:	de 01       	movw	r26, r28
 5fa:	11 96       	adiw	r26, 0x01	; 1
 5fc:	e4 e2       	ldi	r30, 0x24	; 36
 5fe:	f1 e0       	ldi	r31, 0x01	; 1
 600:	83 e0       	ldi	r24, 0x03	; 3
 602:	01 90       	ld	r0, Z+
 604:	0d 92       	st	X+, r0
 606:	81 50       	subi	r24, 0x01	; 1
 608:	e1 f7       	brne	.-8      	; 0x602 <setMinute+0x18>
	int min;
	
	str[0] = s[3];
 60a:	f9 01       	movw	r30, r18
 60c:	83 81       	ldd	r24, Z+3	; 0x03
 60e:	89 83       	std	Y+1, r24	; 0x01
	str[1] = s[4];
 610:	84 81       	ldd	r24, Z+4	; 0x04
 612:	8a 83       	std	Y+2, r24	; 0x02
	
	min = atoi(str);
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	0e 94 ff 03 	call	0x7fe	; 0x7fe <atoi>
	if( min <= 60)
 61c:	8d 33       	cpi	r24, 0x3D	; 61
 61e:	91 05       	cpc	r25, r1
 620:	1c f4       	brge	.+6      	; 0x628 <setMinute+0x3e>
	{
		gMINUTE = (uint8_t)min;
 622:	80 93 2c 01 	sts	0x012C, r24
 626:	08 c0       	rjmp	.+16     	; 0x638 <setMinute+0x4e>
	}
	else
	{
		sendFString(ERROR_NUMBER);
 628:	82 e3       	ldi	r24, 0x32	; 50
 62a:	91 e0       	ldi	r25, 0x01	; 1
 62c:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
		sendFString(ERROR_60);
 630:	85 e5       	ldi	r24, 0x55	; 85
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	}
}
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	cf 91       	pop	r28
 640:	df 91       	pop	r29
 642:	08 95       	ret

00000644 <setSecond>:
	s[0] = '\0';

}

void setSecond(char s[])
{
 644:	df 93       	push	r29
 646:	cf 93       	push	r28
 648:	00 d0       	rcall	.+0      	; 0x64a <setSecond+0x6>
 64a:	0f 92       	push	r0
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	9c 01       	movw	r18, r24
	char str[] = {0,0,'\0'};
 652:	de 01       	movw	r26, r28
 654:	11 96       	adiw	r26, 0x01	; 1
 656:	e7 e2       	ldi	r30, 0x27	; 39
 658:	f1 e0       	ldi	r31, 0x01	; 1
 65a:	83 e0       	ldi	r24, 0x03	; 3
 65c:	01 90       	ld	r0, Z+
 65e:	0d 92       	st	X+, r0
 660:	81 50       	subi	r24, 0x01	; 1
 662:	e1 f7       	brne	.-8      	; 0x65c <setSecond+0x18>
	int sec;
	
	str[0] = s[3];
 664:	f9 01       	movw	r30, r18
 666:	83 81       	ldd	r24, Z+3	; 0x03
 668:	89 83       	std	Y+1, r24	; 0x01
	str[1] = s[4];
 66a:	84 81       	ldd	r24, Z+4	; 0x04
 66c:	8a 83       	std	Y+2, r24	; 0x02
	
	sec = atoi(str);
 66e:	ce 01       	movw	r24, r28
 670:	01 96       	adiw	r24, 0x01	; 1
 672:	0e 94 ff 03 	call	0x7fe	; 0x7fe <atoi>
	if( sec <= 60)
 676:	8d 33       	cpi	r24, 0x3D	; 61
 678:	91 05       	cpc	r25, r1
 67a:	1c f4       	brge	.+6      	; 0x682 <setSecond+0x3e>
	{
		gSECOND = (uint8_t)sec;
 67c:	80 93 2b 01 	sts	0x012B, r24
 680:	08 c0       	rjmp	.+16     	; 0x692 <setSecond+0x4e>
	}
	else
	{
		sendFString(ERROR_NUMBER);
 682:	82 e3       	ldi	r24, 0x32	; 50
 684:	91 e0       	ldi	r25, 0x01	; 1
 686:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
		sendFString(ERROR_60);
 68a:	85 e5       	ldi	r24, 0x55	; 85
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	}
}
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	cf 91       	pop	r28
 69a:	df 91       	pop	r29
 69c:	08 95       	ret

0000069e <parseInput>:
	sendFString(TEXT_TOXX);
	
}

void parseInput(char s[])
{
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	ec 01       	movw	r28, r24

	// parse first character	
	switch (s[0])
 6a4:	88 81       	ld	r24, Y
 6a6:	88 36       	cpi	r24, 0x68	; 104
 6a8:	69 f1       	breq	.+90     	; 0x704 <parseInput+0x66>
 6aa:	89 36       	cpi	r24, 0x69	; 105
 6ac:	30 f4       	brcc	.+12     	; 0x6ba <parseInput+0x1c>
 6ae:	84 36       	cpi	r24, 0x64	; 100
 6b0:	b1 f1       	breq	.+108    	; 0x71e <parseInput+0x80>
 6b2:	87 36       	cpi	r24, 0x67	; 103
 6b4:	09 f0       	breq	.+2      	; 0x6b8 <parseInput+0x1a>
 6b6:	46 c0       	rjmp	.+140    	; 0x744 <parseInput+0xa6>
 6b8:	06 c0       	rjmp	.+12     	; 0x6c6 <parseInput+0x28>
 6ba:	8d 36       	cpi	r24, 0x6D	; 109
 6bc:	c9 f0       	breq	.+50     	; 0x6f0 <parseInput+0x52>
 6be:	83 37       	cpi	r24, 0x73	; 115
 6c0:	09 f0       	breq	.+2      	; 0x6c4 <parseInput+0x26>
 6c2:	40 c0       	rjmp	.+128    	; 0x744 <parseInput+0xa6>
 6c4:	0b c0       	rjmp	.+22     	; 0x6dc <parseInput+0x3e>
	{
		
		case 'g':
			if( (s[1] == 'e') && (s[2] == 't') )
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	85 36       	cpi	r24, 0x65	; 101
 6ca:	09 f0       	breq	.+2      	; 0x6ce <parseInput+0x30>
 6cc:	46 c0       	rjmp	.+140    	; 0x75a <parseInput+0xbc>
 6ce:	8a 81       	ldd	r24, Y+2	; 0x02
 6d0:	84 37       	cpi	r24, 0x74	; 116
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <parseInput+0x38>
 6d4:	42 c0       	rjmp	.+132    	; 0x75a <parseInput+0xbc>
			
			showClock();
 6d6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <showClock>
 6da:	3f c0       	rjmp	.+126    	; 0x75a <parseInput+0xbc>
			break;				
		case 's':
			if( (s[1] == 'e') && (s[2] == 'c') )
 6dc:	89 81       	ldd	r24, Y+1	; 0x01
 6de:	85 36       	cpi	r24, 0x65	; 101
 6e0:	e1 f5       	brne	.+120    	; 0x75a <parseInput+0xbc>
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	83 36       	cpi	r24, 0x63	; 99
 6e6:	c9 f5       	brne	.+114    	; 0x75a <parseInput+0xbc>
			setSecond(s);
 6e8:	ce 01       	movw	r24, r28
 6ea:	0e 94 22 03 	call	0x644	; 0x644 <setSecond>
 6ee:	35 c0       	rjmp	.+106    	; 0x75a <parseInput+0xbc>
			break;				
		case 'm':
			if( (s[1] == 'i') && (s[2] == 'n') )
 6f0:	89 81       	ldd	r24, Y+1	; 0x01
 6f2:	89 36       	cpi	r24, 0x69	; 105
 6f4:	91 f5       	brne	.+100    	; 0x75a <parseInput+0xbc>
 6f6:	8a 81       	ldd	r24, Y+2	; 0x02
 6f8:	8e 36       	cpi	r24, 0x6E	; 110
 6fa:	79 f5       	brne	.+94     	; 0x75a <parseInput+0xbc>
			setMinute(s);
 6fc:	ce 01       	movw	r24, r28
 6fe:	0e 94 f5 02 	call	0x5ea	; 0x5ea <setMinute>
 702:	2b c0       	rjmp	.+86     	; 0x75a <parseInput+0xbc>
			break;				
		case 'h':
			if( (s[1] == 'o') && (s[2] == 'u') && (s[3] == 'r'))
 704:	89 81       	ldd	r24, Y+1	; 0x01
 706:	8f 36       	cpi	r24, 0x6F	; 111
 708:	41 f5       	brne	.+80     	; 0x75a <parseInput+0xbc>
 70a:	8a 81       	ldd	r24, Y+2	; 0x02
 70c:	85 37       	cpi	r24, 0x75	; 117
 70e:	29 f5       	brne	.+74     	; 0x75a <parseInput+0xbc>
 710:	8b 81       	ldd	r24, Y+3	; 0x03
 712:	82 37       	cpi	r24, 0x72	; 114
 714:	11 f5       	brne	.+68     	; 0x75a <parseInput+0xbc>
			setHour(s);
 716:	ce 01       	movw	r24, r28
 718:	0e 94 c8 02 	call	0x590	; 0x590 <setHour>
 71c:	1e c0       	rjmp	.+60     	; 0x75a <parseInput+0xbc>
			break;				
		case 'd':
			if( (s[1] == 'e') && (s[2] == 'm') && (s[3] == 'o') && (s[4] == '?') )
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	85 36       	cpi	r24, 0x65	; 101
 722:	69 f4       	brne	.+26     	; 0x73e <parseInput+0xa0>
 724:	8a 81       	ldd	r24, Y+2	; 0x02
 726:	8d 36       	cpi	r24, 0x6D	; 109
 728:	51 f4       	brne	.+20     	; 0x73e <parseInput+0xa0>
 72a:	8b 81       	ldd	r24, Y+3	; 0x03
 72c:	8f 36       	cpi	r24, 0x6F	; 111
 72e:	39 f4       	brne	.+14     	; 0x73e <parseInput+0xa0>
 730:	8c 81       	ldd	r24, Y+4	; 0x04
 732:	8f 33       	cpi	r24, 0x3F	; 63
 734:	21 f4       	brne	.+8      	; 0x73e <parseInput+0xa0>
			sendFString(TALKING_TO);
 736:	8c e5       	ldi	r24, 0x5C	; 92
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
			sendFString(WHO_DEMO);
 73e:	85 e7       	ldi	r24, 0x75	; 117
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	09 c0       	rjmp	.+18     	; 0x756 <parseInput+0xb8>
			break;
		default:
			sendFString(BAD_COMMAND1);
 744:	8e e8       	ldi	r24, 0x8E	; 142
 746:	90 e0       	ldi	r25, 0x00	; 0
 748:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
			sendChar(s[0]);
 74c:	88 81       	ld	r24, Y
 74e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <sendChar>
			sendFString(BAD_COMMAND2);
 752:	8b e9       	ldi	r24, 0x9B	; 155
 754:	90 e0       	ldi	r25, 0x00	; 0
 756:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>

			break;
		
	}
	s[0] = '\0';
 75a:	18 82       	st	Y, r1

}
 75c:	df 91       	pop	r29
 75e:	cf 91       	pop	r28
 760:	08 95       	ret

00000762 <initializer>:
unsigned char gSECOND;
unsigned char gMINUTE;
unsigned char gHOUR;

void initializer()
{
 762:	ef 92       	push	r14
 764:	ff 92       	push	r15
 766:	0f 93       	push	r16
 768:	1f 93       	push	r17
	// Calibrate the oscillator:
    OSCCAL_calibration();   
 76a:	0e 94 49 01 	call	0x292	; 0x292 <OSCCAL_calibration>

	// Initialize the USART
	USARTinit();
 76e:	0e 94 2e 01 	call	0x25c	; 0x25c <USARTinit>
	
	// Initialize the RTC
	RTC_init();
 772:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <RTC_init>
		
	// Display instructions on PC
	sendFString(TALKING_TO);
 776:	8c e5       	ldi	r24, 0x5C	; 92
 778:	90 e0       	ldi	r25, 0x00	; 0
 77a:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(WHO_DEMO);
 77e:	85 e7       	ldi	r24, 0x75	; 117
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(ENTER);
 786:	f4 eb       	ldi	r31, 0xB4	; 180
 788:	ef 2e       	mov	r14, r31
 78a:	f0 e0       	ldi	r31, 0x00	; 0
 78c:	ff 2e       	mov	r15, r31
 78e:	c7 01       	movw	r24, r14
 790:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_GET);
 794:	8b eb       	ldi	r24, 0xBB	; 187
 796:	90 e0       	ldi	r25, 0x00	; 0
 798:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(ENTER);	
 79c:	c7 01       	movw	r24, r14
 79e:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_SEC);	
 7a2:	8c ed       	ldi	r24, 0xDC	; 220
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_TOXX);
 7aa:	09 e2       	ldi	r16, 0x29	; 41
 7ac:	11 e0       	ldi	r17, 0x01	; 1
 7ae:	c8 01       	movw	r24, r16
 7b0:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(ENTER);	
 7b4:	c7 01       	movw	r24, r14
 7b6:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_MIN);	
 7ba:	86 ef       	ldi	r24, 0xF6	; 246
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_TOXX);
 7c2:	c8 01       	movw	r24, r16
 7c4:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(ENTER);	
 7c8:	c7 01       	movw	r24, r14
 7ca:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_HOUR);	
 7ce:	80 e1       	ldi	r24, 0x10	; 16
 7d0:	91 e0       	ldi	r25, 0x01	; 1
 7d2:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	sendFString(TEXT_TOXX);
 7d6:	c8 01       	movw	r24, r16
 7d8:	0e 94 15 01 	call	0x22a	; 0x22a <sendFString>
	
}
 7dc:	1f 91       	pop	r17
 7de:	0f 91       	pop	r16
 7e0:	ff 90       	pop	r15
 7e2:	ef 90       	pop	r14
 7e4:	08 95       	ret

000007e6 <__udivmodqi4>:
 7e6:	99 1b       	sub	r25, r25
 7e8:	79 e0       	ldi	r23, 0x09	; 9
 7ea:	04 c0       	rjmp	.+8      	; 0x7f4 <__udivmodqi4_ep>

000007ec <__udivmodqi4_loop>:
 7ec:	99 1f       	adc	r25, r25
 7ee:	96 17       	cp	r25, r22
 7f0:	08 f0       	brcs	.+2      	; 0x7f4 <__udivmodqi4_ep>
 7f2:	96 1b       	sub	r25, r22

000007f4 <__udivmodqi4_ep>:
 7f4:	88 1f       	adc	r24, r24
 7f6:	7a 95       	dec	r23
 7f8:	c9 f7       	brne	.-14     	; 0x7ec <__udivmodqi4_loop>
 7fa:	80 95       	com	r24
 7fc:	08 95       	ret

000007fe <atoi>:
 7fe:	fc 01       	movw	r30, r24
 800:	88 27       	eor	r24, r24
 802:	99 27       	eor	r25, r25
 804:	e8 94       	clt
 806:	21 91       	ld	r18, Z+
 808:	20 32       	cpi	r18, 0x20	; 32
 80a:	e9 f3       	breq	.-6      	; 0x806 <atoi+0x8>
 80c:	29 30       	cpi	r18, 0x09	; 9
 80e:	10 f0       	brcs	.+4      	; 0x814 <atoi+0x16>
 810:	2e 30       	cpi	r18, 0x0E	; 14
 812:	c8 f3       	brcs	.-14     	; 0x806 <atoi+0x8>
 814:	2b 32       	cpi	r18, 0x2B	; 43
 816:	41 f0       	breq	.+16     	; 0x828 <atoi+0x2a>
 818:	2d 32       	cpi	r18, 0x2D	; 45
 81a:	39 f4       	brne	.+14     	; 0x82a <atoi+0x2c>
 81c:	68 94       	set
 81e:	04 c0       	rjmp	.+8      	; 0x828 <atoi+0x2a>
 820:	0e 94 1d 04 	call	0x83a	; 0x83a <__mulhi_const_10>
 824:	82 0f       	add	r24, r18
 826:	91 1d       	adc	r25, r1
 828:	21 91       	ld	r18, Z+
 82a:	20 53       	subi	r18, 0x30	; 48
 82c:	2a 30       	cpi	r18, 0x0A	; 10
 82e:	c0 f3       	brcs	.-16     	; 0x820 <atoi+0x22>
 830:	1e f4       	brtc	.+6      	; 0x838 <atoi+0x3a>
 832:	90 95       	com	r25
 834:	81 95       	neg	r24
 836:	9f 4f       	sbci	r25, 0xFF	; 255
 838:	08 95       	ret

0000083a <__mulhi_const_10>:
 83a:	7a e0       	ldi	r23, 0x0A	; 10
 83c:	97 9f       	mul	r25, r23
 83e:	90 2d       	mov	r25, r0
 840:	87 9f       	mul	r24, r23
 842:	80 2d       	mov	r24, r0
 844:	91 0d       	add	r25, r1
 846:	11 24       	eor	r1, r1
 848:	08 95       	ret

0000084a <_exit>:
 84a:	f8 94       	cli

0000084c <__stop_program>:
 84c:	ff cf       	rjmp	.-2      	; 0x84c <__stop_program>
