
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004be  00000552  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800102  00800102  00000554  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ce  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006af  00000000  00000000  000007a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034d  00000000  00000000  00000e51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bc  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  0000175c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027b  00000000  00000000  0000187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e9  00000000  00000000  00001af7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  44:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  48:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_22>

0000005c <__c.1366>:
  5c:	48 48 4d 4d 53 53 00                                HHMMSS.

00000063 <LCD_character_table>:
  63:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  73:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  8f:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  9f:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  af:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  bf:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........
	...

000000d0 <__ctors_end>:
  d0:	11 24       	eor	r1, r1
  d2:	1f be       	out	0x3f, r1	; 63
  d4:	cf ef       	ldi	r28, 0xFF	; 255
  d6:	d4 e0       	ldi	r29, 0x04	; 4
  d8:	de bf       	out	0x3e, r29	; 62
  da:	cd bf       	out	0x3d, r28	; 61

000000dc <__do_copy_data>:
  dc:	11 e0       	ldi	r17, 0x01	; 1
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b1 e0       	ldi	r27, 0x01	; 1
  e2:	ee eb       	ldi	r30, 0xBE	; 190
  e4:	f4 e0       	ldi	r31, 0x04	; 4
  e6:	02 c0       	rjmp	.+4      	; 0xec <.do_copy_data_start>

000000e8 <.do_copy_data_loop>:
  e8:	05 90       	lpm	r0, Z+
  ea:	0d 92       	st	X+, r0

000000ec <.do_copy_data_start>:
  ec:	a2 30       	cpi	r26, 0x02	; 2
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <.do_copy_data_loop>

000000f2 <__do_clear_bss>:
  f2:	11 e0       	ldi	r17, 0x01	; 1
  f4:	a2 e0       	ldi	r26, 0x02	; 2
  f6:	b1 e0       	ldi	r27, 0x01	; 1
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	a5 33       	cpi	r26, 0x35	; 53
  fe:	b1 07       	cpc	r27, r17
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 106:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <main>:
	// Initial state variables
	statetext = PSTR("HHMMSS");
	//digit = CHAR2BCD2(number);

	// Program initalization
    LCD_Init();
 10e:	0e 94 8d 01 	call	0x31a	; 0x31a <LCD_Init>
    sei(); // mt __enable_interrupt();
 112:	78 94       	sei
	// mt static char __flash *statetext;
	//(PGM_P const char*)
	PGM_P statetext;
	
	// Initial state variables
	statetext = PSTR("HHMMSS");
 114:	8c e5       	ldi	r24, 0x5C	; 92
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 c7 00 	call	0x18e	; 0x18e <LCD_puts_f>
	for (;;)            // Main loop
    {
		if (statetext)
        {
			LCD_puts_f(statetext, 1);
			LCD_Colon(1);
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_Colon>
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x16>

00000126 <CHAR2BCD2>:
*                   The input must be in the range 0 to 99.
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
 126:	48 2f       	mov	r20, r24
 128:	6a e0       	ldi	r22, 0x0A	; 10
 12a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodqi4>
 12e:	28 2f       	mov	r18, r24
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	84 e0       	ldi	r24, 0x04	; 4
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	8a 95       	dec	r24
 13a:	e1 f7       	brne	.-8      	; 0x134 <CHAR2BCD2+0xe>
 13c:	84 2f       	mov	r24, r20
 13e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodqi4>
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 142:	89 2f       	mov	r24, r25
 144:	82 2b       	or	r24, r18
 146:	08 95       	ret

00000148 <CHAR2BCD3>:
*                   The result is an integer where the three lowest nibbles
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
 148:	28 2f       	mov	r18, r24
 14a:	64 e6       	ldi	r22, 0x64	; 100
 14c:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodqi4>
 150:	49 2f       	mov	r20, r25
 152:	82 2f       	mov	r24, r18
 154:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodqi4>
 158:	28 2f       	mov	r18, r24
 15a:	30 e0       	ldi	r19, 0x00	; 0
    {
        high++;
        input -= 100;
    }

    high <<= 4;
 15c:	54 e0       	ldi	r21, 0x04	; 4
 15e:	22 0f       	add	r18, r18
 160:	33 1f       	adc	r19, r19
 162:	5a 95       	dec	r21
 164:	e1 f7       	brne	.-8      	; 0x15e <CHAR2BCD3+0x16>
 166:	84 2f       	mov	r24, r20
 168:	6a e0       	ldi	r22, 0x0A	; 10
 16a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodqi4>
 16e:	28 0f       	add	r18, r24
 170:	31 1d       	adc	r19, r1
 172:	94 e0       	ldi	r25, 0x04	; 4
 174:	22 0f       	add	r18, r18
 176:	33 1f       	adc	r19, r19
 178:	9a 95       	dec	r25
 17a:	e1 f7       	brne	.-8      	; 0x174 <CHAR2BCD3+0x2c>
 17c:	84 2f       	mov	r24, r20
 17e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <__udivmodqi4>
 182:	89 2f       	mov	r24, r25
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	28 2b       	or	r18, r24
 188:	39 2b       	or	r19, r25
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 18a:	c9 01       	movw	r24, r18
 18c:	08 95       	ret

0000018e <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
 18e:	38 2f       	mov	r19, r24
 190:	29 2f       	mov	r18, r25
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 192:	80 91 02 01 	lds	r24, 0x0102
 196:	88 23       	and	r24, r24
 198:	e1 f7       	brne	.-8      	; 0x192 <LCD_puts_f+0x4>
 19a:	ab e1       	ldi	r26, 0x1B	; 27
 19c:	b1 e0       	ldi	r27, 0x01	; 1
 19e:	83 2f       	mov	r24, r19
 1a0:	92 2f       	mov	r25, r18
 1a2:	fc 01       	movw	r30, r24
 1a4:	01 c0       	rjmp	.+2      	; 0x1a8 <LCD_puts_f+0x1a>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 1a6:	8d 93       	st	X+, r24
 1a8:	9e 2f       	mov	r25, r30
 1aa:	93 1b       	sub	r25, r19
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 1ac:	84 91       	lpm	r24, Z+
 1ae:	88 23       	and	r24, r24
 1b0:	29 f0       	breq	.+10     	; 0x1bc <LCD_puts_f+0x2e>
 1b2:	31 96       	adiw	r30, 0x01	; 1
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	a4 33       	cpi	r26, 0x34	; 52
 1b8:	b2 07       	cpc	r27, r18
 1ba:	a9 f7       	brne	.-22     	; 0x1a6 <LCD_puts_f+0x18>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
 1bc:	e9 2f       	mov	r30, r25
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	e5 5e       	subi	r30, 0xE5	; 229
 1c2:	fe 4f       	sbci	r31, 0xFE	; 254
 1c4:	10 82       	st	Z, r1

    if (i > 6)
 1c6:	97 30       	cpi	r25, 0x07	; 7
 1c8:	48 f0       	brcs	.+18     	; 0x1dc <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 06 01 	sts	0x0106, r24
        gScroll = 0;
 1d0:	10 92 34 01 	sts	0x0134, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 1d4:	83 e0       	ldi	r24, 0x03	; 3
 1d6:	80 93 03 01 	sts	0x0103, r24
 1da:	04 c0       	rjmp	.+8      	; 0x1e4 <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 1dc:	10 92 06 01 	sts	0x0106, r1
        gScroll = 0;
 1e0:	10 92 34 01 	sts	0x0134, r1
    }

    gLCD_Update_Required = 1;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 02 01 	sts	0x0102, r24
}
 1ea:	08 95       	ret

000001ec <LCD_puts>:
*
*	Purpose :		Writes a string to the LCD
*
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
 1ec:	48 2f       	mov	r20, r24
 1ee:	29 2f       	mov	r18, r25
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 1f0:	80 91 02 01 	lds	r24, 0x0102
 1f4:	88 23       	and	r24, r24
 1f6:	e1 f7       	brne	.-8      	; 0x1f0 <LCD_puts+0x4>
 1f8:	ab e1       	ldi	r26, 0x1B	; 27
 1fa:	b1 e0       	ldi	r27, 0x01	; 1
 1fc:	84 2f       	mov	r24, r20
 1fe:	92 2f       	mov	r25, r18
 200:	9c 01       	movw	r18, r24
 202:	f9 01       	movw	r30, r18
 204:	01 c0       	rjmp	.+2      	; 0x208 <LCD_puts+0x1c>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    {
        gTextBuffer[i] = pStr[i];
 206:	8d 93       	st	X+, r24
 208:	9e 2f       	mov	r25, r30
 20a:	94 1b       	sub	r25, r20
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 20c:	80 81       	ld	r24, Z
 20e:	88 23       	and	r24, r24
 210:	29 f0       	breq	.+10     	; 0x21c <LCD_puts+0x30>
 212:	31 96       	adiw	r30, 0x01	; 1
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	a4 33       	cpi	r26, 0x34	; 52
 218:	b2 07       	cpc	r27, r18
 21a:	a9 f7       	brne	.-22     	; 0x206 <LCD_puts+0x1a>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 21c:	e9 2f       	mov	r30, r25
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	e5 5e       	subi	r30, 0xE5	; 229
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	10 82       	st	Z, r1

    if (i > 6)
 226:	97 30       	cpi	r25, 0x07	; 7
 228:	48 f0       	brcs	.+18     	; 0x23c <LCD_puts+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 06 01 	sts	0x0106, r24
        gScroll = 0;
 230:	10 92 34 01 	sts	0x0134, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	80 93 03 01 	sts	0x0103, r24
 23a:	04 c0       	rjmp	.+8      	; 0x244 <LCD_puts+0x58>
    }
    else
    {
        gScrollMode = 0;        
 23c:	10 92 06 01 	sts	0x0106, r1
        gScroll = 0;
 240:	10 92 34 01 	sts	0x0134, r1
    }

    gLCD_Update_Required = 1;
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	80 93 02 01 	sts	0x0102, r24
}
 24a:	08 95       	ret

0000024c <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 24c:	89 31       	cpi	r24, 0x19	; 25
 24e:	28 f4       	brcc	.+10     	; 0x25a <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 250:	e8 2f       	mov	r30, r24
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	e5 5e       	subi	r30, 0xE5	; 229
 256:	fe 4f       	sbci	r31, 0xFE	; 254
 258:	60 83       	st	Z, r22
 25a:	08 95       	ret

0000025c <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 25c:	eb e1       	ldi	r30, 0x1B	; 27
 25e:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = ' ';
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	e4 33       	cpi	r30, 0x34	; 52
 268:	f9 07       	cpc	r31, r25
 26a:	d9 f7       	brne	.-10     	; 0x262 <LCD_Clear+0x6>
        gTextBuffer[i] = ' ';
}
 26c:	08 95       	ret

0000026e <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 26e:	80 93 05 01 	sts	0x0105, r24
}
 272:	08 95       	ret

00000274 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
 274:	98 2f       	mov	r25, r24

    while (gLCD_Update_Required);
 276:	80 91 02 01 	lds	r24, 0x0102
 27a:	88 23       	and	r24, r24
 27c:	e1 f7       	brne	.-8      	; 0x276 <LCD_UpdateRequired+0x2>
    
    gScrollMode = scrollmode;
 27e:	60 93 06 01 	sts	0x0106, r22
    gScroll = 0;
 282:	10 92 34 01 	sts	0x0134, r1

    gLCD_Update_Required = update;
 286:	90 93 02 01 	sts	0x0102, r25
}
 28a:	08 95       	ret

0000028c <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 28c:	10 92 04 01 	sts	0x0104, r1
}
 290:	08 95       	ret

00000292 <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
 292:	98 2f       	mov	r25, r24
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 294:	66 30       	cpi	r22, 0x06	; 6
 296:	b0 f5       	brcc	.+108    	; 0x304 <LCD_WriteDigit+0x72>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 298:	8a 52       	subi	r24, 0x2A	; 42
 29a:	81 35       	cpi	r24, 0x51	; 81
 29c:	18 f0       	brcs	.+6      	; 0x2a4 <LCD_WriteDigit+0x12>
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	50 e0       	ldi	r21, 0x00	; 0
 2a2:	0c c0       	rjmp	.+24     	; 0x2bc <LCD_WriteDigit+0x2a>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 2a4:	91 36       	cpi	r25, 0x61	; 97
 2a6:	08 f0       	brcs	.+2      	; 0x2aa <LCD_WriteDigit+0x18>
            c &= ~0x20;                         // if necessarry
 2a8:	9f 7d       	andi	r25, 0xDF	; 223

        c -= '*';

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 2aa:	9a 52       	subi	r25, 0x2A	; 42
 2ac:	e9 2f       	mov	r30, r25
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	ee 0f       	add	r30, r30
 2b2:	ff 1f       	adc	r31, r31
 2b4:	ed 59       	subi	r30, 0x9D	; 157
 2b6:	ff 4f       	sbci	r31, 0xFF	; 255
 2b8:	45 91       	lpm	r20, Z+
 2ba:	54 91       	lpm	r21, Z+
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 2bc:	86 2f       	mov	r24, r22
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	dc 01       	movw	r26, r24
 2c2:	a1 70       	andi	r26, 0x01	; 1
 2c4:	b0 70       	andi	r27, 0x00	; 0
 2c6:	60 fd       	sbrc	r22, 0
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <LCD_WriteDigit+0x3c>
 2ca:	90 ef       	ldi	r25, 0xF0	; 240
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <LCD_WriteDigit+0x3e>
 2ce:	9f e0       	ldi	r25, 0x0F	; 15
        mask = 0x0F;                // Digit 1, 3, 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 2d0:	66 95       	lsr	r22
 2d2:	e6 2f       	mov	r30, r22
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	e9 5f       	subi	r30, 0xF9	; 249
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	30 e0       	ldi	r19, 0x00	; 0

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 2dc:	24 2f       	mov	r18, r20
 2de:	2f 70       	andi	r18, 0x0F	; 15
        seg >>= 4;
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	56 95       	lsr	r21
 2e4:	47 95       	ror	r20
 2e6:	8a 95       	dec	r24
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <LCD_WriteDigit+0x50>
        if (digit & 0x01)
 2ea:	10 97       	sbiw	r26, 0x00	; 0
 2ec:	11 f0       	breq	.+4      	; 0x2f2 <LCD_WriteDigit+0x60>
            nibble <<= 4;
 2ee:	22 95       	swap	r18
 2f0:	20 7f       	andi	r18, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 2f2:	80 81       	ld	r24, Z
 2f4:	89 23       	and	r24, r25
 2f6:	28 2b       	or	r18, r24
 2f8:	20 83       	st	Z, r18
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 2fa:	3f 5f       	subi	r19, 0xFF	; 255
 2fc:	34 30       	cpi	r19, 0x04	; 4
 2fe:	11 f0       	breq	.+4      	; 0x304 <LCD_WriteDigit+0x72>
        nibble = seg & 0x000F;
        seg >>= 4;
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
 300:	35 96       	adiw	r30, 0x05	; 5
 302:	ec cf       	rjmp	.-40     	; 0x2dc <LCD_WriteDigit+0x4a>
 304:	08 95       	ret

00000306 <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 306:	81 11       	cpse	r24, r1
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	e7 e0       	ldi	r30, 0x07	; 7
 30c:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 30e:	81 93       	st	Z+, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	eb 31       	cpi	r30, 0x1B	; 27
 314:	f9 07       	cpc	r31, r25
 316:	d9 f7       	brne	.-10     	; 0x30e <LCD_AllSegments+0x8>
        *(LCD_Data + i) = show;
}
 318:	08 95       	ret

0000031a <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	0e 94 83 01 	call	0x306	; 0x306 <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 320:	8f e0       	ldi	r24, 0x0F	; 15
 322:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 326:	87 eb       	ldi	r24, 0xB7	; 183
 328:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 32c:	87 e0       	ldi	r24, 0x07	; 7
 32e:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 332:	e4 ee       	ldi	r30, 0xE4	; 228
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	80 ec       	ldi	r24, 0xC0	; 192
 338:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 33a:	80 81       	ld	r24, Z
 33c:	88 60       	ori	r24, 0x08	; 8
 33e:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 340:	10 92 02 01 	sts	0x0102, r1


}
 344:	08 95       	ret

00000346 <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	ef 92       	push	r14
 352:	ff 92       	push	r15
 354:	0f 93       	push	r16
 356:	1f 93       	push	r17
 358:	2f 93       	push	r18
 35a:	3f 93       	push	r19
 35c:	4f 93       	push	r20
 35e:	5f 93       	push	r21
 360:	6f 93       	push	r22
 362:	7f 93       	push	r23
 364:	8f 93       	push	r24
 366:	9f 93       	push	r25
 368:	af 93       	push	r26
 36a:	bf 93       	push	r27
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
        auto_joystick_count = 0;
*/

/**************** Auto press joystick for the main.c, END ***************/    

    LCD_timer--;                    // Decreased every LCD frame
 374:	00 91 01 01 	lds	r16, 0x0101
 378:	01 50       	subi	r16, 0x01	; 1
 37a:	00 93 01 01 	sts	0x0101, r16

    if (gScrollMode)
 37e:	80 91 06 01 	lds	r24, 0x0106
 382:	88 23       	and	r24, r24
 384:	71 f0       	breq	.+28     	; 0x3a2 <__vector_22+0x5c>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
 386:	00 23       	and	r16, r16
 388:	71 f4       	brne	.+28     	; 0x3a6 <__vector_22+0x60>
        {
            if (gLCD_Start_Scroll_Timer == 0)
 38a:	80 91 03 01 	lds	r24, 0x0103
 38e:	88 23       	and	r24, r24
 390:	21 f4       	brne	.+8      	; 0x39a <__vector_22+0x54>
            {
                gLCD_Update_Required = TRUE;
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	80 93 02 01 	sts	0x0102, r24
 398:	06 c0       	rjmp	.+12     	; 0x3a6 <__vector_22+0x60>
            }
            else
                gLCD_Start_Scroll_Timer--;
 39a:	81 50       	subi	r24, 0x01	; 1
 39c:	80 93 03 01 	sts	0x0103, r24
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <__vector_22+0x60>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
 3a2:	10 92 34 01 	sts	0x0134, r1
    }


    EOL = FALSE;
    if (gLCD_Update_Required == TRUE)
 3a6:	80 91 02 01 	lds	r24, 0x0102
 3aa:	81 30       	cpi	r24, 0x01	; 1
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <__vector_22+0x6a>
 3ae:	53 c0       	rjmp	.+166    	; 0x456 <__vector_22+0x110>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
 3b0:	e0 90 04 01 	lds	r14, 0x0104
 3b4:	ff 24       	eor	r15, r15
 3b6:	10 e0       	ldi	r17, 0x00	; 0
 3b8:	c0 e0       	ldi	r28, 0x00	; 0
 3ba:	d0 e0       	ldi	r29, 0x00	; 0
 3bc:	6c 2f       	mov	r22, r28
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
        {
            if ((gScroll+i) >= 0 && (!EOL))
 3be:	80 91 34 01 	lds	r24, 0x0134
 3c2:	99 27       	eor	r25, r25
 3c4:	87 fd       	sbrc	r24, 7
 3c6:	90 95       	com	r25
 3c8:	8c 0f       	add	r24, r28
 3ca:	9d 1f       	adc	r25, r29
 3cc:	97 fd       	sbrc	r25, 7
 3ce:	16 c0       	rjmp	.+44     	; 0x3fc <__vector_22+0xb6>
 3d0:	11 23       	and	r17, r17
 3d2:	a1 f4       	brne	.+40     	; 0x3fc <__vector_22+0xb6>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
 3d4:	80 91 34 01 	lds	r24, 0x0134
 3d8:	99 27       	eor	r25, r25
 3da:	87 fd       	sbrc	r24, 7
 3dc:	90 95       	com	r25
 3de:	fe 01       	movw	r30, r28
 3e0:	e5 5e       	subi	r30, 0xE5	; 229
 3e2:	fe 4f       	sbci	r31, 0xFE	; 254
 3e4:	e8 0f       	add	r30, r24
 3e6:	f9 1f       	adc	r31, r25
 3e8:	80 81       	ld	r24, Z
                c_flash = c & 0x80 ? 1 : 0;
 3ea:	f8 2e       	mov	r15, r24
 3ec:	ff 1c       	adc	r15, r15
 3ee:	ff 24       	eor	r15, r15
 3f0:	ff 1c       	adc	r15, r15
                c = c & 0x7F;
 3f2:	8f 77       	andi	r24, 0x7F	; 127

                if (c == '\0')
 3f4:	21 f4       	brne	.+8      	; 0x3fe <__vector_22+0xb8>
 3f6:	1c 2f       	mov	r17, r28
 3f8:	1f 5f       	subi	r17, 0xFF	; 255
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <__vector_22+0xb8>
 3fc:	80 e2       	ldi	r24, 0x20	; 32
            else
                c = ' ';

            // Check if this character is flashing

            if (c_flash && flash)
 3fe:	ff 20       	and	r15, r15
 400:	21 f0       	breq	.+8      	; 0x40a <__vector_22+0xc4>
 402:	94 e0       	ldi	r25, 0x04	; 4
 404:	9e 15       	cp	r25, r14
 406:	08 f4       	brcc	.+2      	; 0x40a <__vector_22+0xc4>
                LCD_WriteDigit(' ', i);
 408:	80 e2       	ldi	r24, 0x20	; 32
            else
                LCD_WriteDigit(c, i);
 40a:	0e 94 49 01 	call	0x292	; 0x292 <LCD_WriteDigit>
 40e:	21 96       	adiw	r28, 0x01	; 1
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
 410:	c6 30       	cpi	r28, 0x06	; 6
 412:	d1 05       	cpc	r29, r1
 414:	99 f6       	brne	.-90     	; 0x3bc <__vector_22+0x76>
 416:	ac ee       	ldi	r26, 0xEC	; 236
 418:	b0 e0       	ldi	r27, 0x00	; 0
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
            *(pLCDREG + i) = *(LCD_Data+i);
 41a:	fd 01       	movw	r30, r26
 41c:	e5 5e       	subi	r30, 0xE5	; 229
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
 420:	80 81       	ld	r24, Z
 422:	8d 93       	st	X+, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	a0 30       	cpi	r26, 0x00	; 0
 428:	b8 07       	cpc	r27, r24
 42a:	b9 f7       	brne	.-18     	; 0x41a <__vector_22+0xd4>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
 42c:	80 91 05 01 	lds	r24, 0x0105
 430:	88 23       	and	r24, r24
 432:	21 f0       	breq	.+8      	; 0x43c <__vector_22+0xf6>
            *(pLCDREG + 8) = 0x01;
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	80 93 f4 00 	sts	0x00F4, r24
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__vector_22+0xfa>
        else
            *(pLCDREG + 8) = 0x00;
 43c:	10 92 f4 00 	sts	0x00F4, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
 440:	11 30       	cpi	r17, 0x01	; 1
 442:	11 f4       	brne	.+4      	; 0x448 <__vector_22+0x102>
            gScroll = -6;
 444:	8a ef       	ldi	r24, 0xFA	; 250
 446:	03 c0       	rjmp	.+6      	; 0x44e <__vector_22+0x108>
        else
            gScroll++;
 448:	80 91 34 01 	lds	r24, 0x0134
 44c:	8f 5f       	subi	r24, 0xFF	; 255
 44e:	80 93 34 01 	sts	0x0134, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
 452:	10 92 02 01 	sts	0x0102, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
 456:	00 23       	and	r16, r16
 458:	19 f4       	brne	.+6      	; 0x460 <__vector_22+0x11a>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
 45a:	83 e0       	ldi	r24, 0x03	; 3
 45c:	80 93 01 01 	sts	0x0101, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
 460:	80 91 04 01 	lds	r24, 0x0104
 464:	8a 30       	cpi	r24, 0x0A	; 10
 466:	19 f4       	brne	.+6      	; 0x46e <__vector_22+0x128>
        gFlashTimer= 0;
 468:	10 92 04 01 	sts	0x0104, r1
 46c:	03 c0       	rjmp	.+6      	; 0x474 <__vector_22+0x12e>
    else
        gFlashTimer++;
 46e:	8f 5f       	subi	r24, 0xFF	; 255
 470:	80 93 04 01 	sts	0x0104, r24

}
 474:	ff 91       	pop	r31
 476:	ef 91       	pop	r30
 478:	df 91       	pop	r29
 47a:	cf 91       	pop	r28
 47c:	bf 91       	pop	r27
 47e:	af 91       	pop	r26
 480:	9f 91       	pop	r25
 482:	8f 91       	pop	r24
 484:	7f 91       	pop	r23
 486:	6f 91       	pop	r22
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	ff 90       	pop	r15
 496:	ef 90       	pop	r14
 498:	0f 90       	pop	r0
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	0f 90       	pop	r0
 49e:	1f 90       	pop	r1
 4a0:	18 95       	reti

000004a2 <__udivmodqi4>:
 4a2:	99 1b       	sub	r25, r25
 4a4:	79 e0       	ldi	r23, 0x09	; 9
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__udivmodqi4_ep>

000004a8 <__udivmodqi4_loop>:
 4a8:	99 1f       	adc	r25, r25
 4aa:	96 17       	cp	r25, r22
 4ac:	08 f0       	brcs	.+2      	; 0x4b0 <__udivmodqi4_ep>
 4ae:	96 1b       	sub	r25, r22

000004b0 <__udivmodqi4_ep>:
 4b0:	88 1f       	adc	r24, r24
 4b2:	7a 95       	dec	r23
 4b4:	c9 f7       	brne	.-14     	; 0x4a8 <__udivmodqi4_loop>
 4b6:	80 95       	com	r24
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
