
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000004c2  00000556  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004c2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000033  00800102  00800102  00000558  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000558  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001ce  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006af  00000000  00000000  000007a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000034d  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bc  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027b  00000000  00000000  00001880  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e9  00000000  00000000  00001afb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 a5 01 	jmp	0x34a	; 0x34a <__vector_22>

0000005c <__c.1489>:
  5c:	48 65 6c 6c 6f 20 57 6f 72 6c 64 00                 Hello World.

00000068 <LCD_character_table>:
  68:	51 0a 80 2a 00 00 00 0a 51 0a 00 00 59 55 18 01     Q..*....Q...YU..
  78:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
	...
  94:	00 00 51 0f 91 39 41 14 91 31 41 1e 41 0e 41 1d     ..Q..9A..1A.A.A.
  a4:	50 0f 80 20 10 15 48 86 40 14 78 05 70 85 51 15     P.. ..H.@.x.p.Q.
  b4:	51 0e 51 95 51 8e 21 90 81 20 50 15 48 44 50 c5     Q.Q.Q.!.. P.HDP.
  c4:	28 c0 28 20 09 50 00 00 00 00 00 00 00 00 00 00     (.( .P..........

000000d4 <__ctors_end>:
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf ef       	ldi	r28, 0xFF	; 255
  da:	d4 e0       	ldi	r29, 0x04	; 4
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
  e0:	11 e0       	ldi	r17, 0x01	; 1
  e2:	a0 e0       	ldi	r26, 0x00	; 0
  e4:	b1 e0       	ldi	r27, 0x01	; 1
  e6:	e2 ec       	ldi	r30, 0xC2	; 194
  e8:	f4 e0       	ldi	r31, 0x04	; 4
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <.do_copy_data_start>

000000ec <.do_copy_data_loop>:
  ec:	05 90       	lpm	r0, Z+
  ee:	0d 92       	st	X+, r0

000000f0 <.do_copy_data_start>:
  f0:	a2 30       	cpi	r26, 0x02	; 2
  f2:	b1 07       	cpc	r27, r17
  f4:	d9 f7       	brne	.-10     	; 0xec <.do_copy_data_loop>

000000f6 <__do_clear_bss>:
  f6:	11 e0       	ldi	r17, 0x01	; 1
  f8:	a2 e0       	ldi	r26, 0x02	; 2
  fa:	b1 e0       	ldi	r27, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
 100:	a5 33       	cpi	r26, 0x35	; 53
 102:	b1 07       	cpc	r27, r17
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>
 106:	0e 94 89 00 	call	0x112	; 0x112 <main>
 10a:	0c 94 5f 02 	jmp	0x4be	; 0x4be <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <main>:
	// Initial state variables
	statetext = PSTR("Hello World");
	//digit = CHAR2BCD2(number);

	// Program initalization
    LCD_Init();
 112:	0e 94 8f 01 	call	0x31e	; 0x31e <LCD_Init>
    sei(); // mt __enable_interrupt();
 116:	78 94       	sei
	// mt static char __flash *statetext;
	//(PGM_P const char*)
	PGM_P statetext;
	
	// Initial state variables
	statetext = PSTR("Hello World");
 118:	8c e5       	ldi	r24, 0x5C	; 92
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	0e 94 c9 00 	call	0x192	; 0x192 <LCD_puts_f>
    {
		if (statetext)
        {
			LCD_puts_f(statetext, 1);
			
			LCD_Colon(1);
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 39 01 	call	0x272	; 0x272 <LCD_Colon>
 128:	ff cf       	rjmp	.-2      	; 0x128 <main+0x16>

0000012a <CHAR2BCD2>:
*                   The input must be in the range 0 to 99.
*                   The result is byte where the high and low nibbles
*                   contain the tens and ones of the input.
*****************************************************************************/
char CHAR2BCD2(char input)
{
 12a:	48 2f       	mov	r20, r24
 12c:	6a e0       	ldi	r22, 0x0A	; 10
 12e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 132:	28 2f       	mov	r18, r24
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	22 0f       	add	r18, r18
 13a:	33 1f       	adc	r19, r19
 13c:	8a 95       	dec	r24
 13e:	e1 f7       	brne	.-8      	; 0x138 <CHAR2BCD2+0xe>
 140:	84 2f       	mov	r24, r20
 142:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 146:	89 2f       	mov	r24, r25
 148:	82 2b       	or	r24, r18
 14a:	08 95       	ret

0000014c <CHAR2BCD3>:
*                   The result is an integer where the three lowest nibbles
*                   contain the ones, tens and hundreds of the input.
*
*****************************************************************************/
unsigned int CHAR2BCD3(char input)
{
 14c:	28 2f       	mov	r18, r24
 14e:	64 e6       	ldi	r22, 0x64	; 100
 150:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 154:	49 2f       	mov	r20, r25
 156:	82 2f       	mov	r24, r18
 158:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 15c:	28 2f       	mov	r18, r24
 15e:	30 e0       	ldi	r19, 0x00	; 0
    {
        high++;
        input -= 100;
    }

    high <<= 4;
 160:	54 e0       	ldi	r21, 0x04	; 4
 162:	22 0f       	add	r18, r18
 164:	33 1f       	adc	r19, r19
 166:	5a 95       	dec	r21
 168:	e1 f7       	brne	.-8      	; 0x162 <CHAR2BCD3+0x16>
 16a:	84 2f       	mov	r24, r20
 16c:	6a e0       	ldi	r22, 0x0A	; 10
 16e:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 172:	28 0f       	add	r18, r24
 174:	31 1d       	adc	r19, r1
 176:	94 e0       	ldi	r25, 0x04	; 4
 178:	22 0f       	add	r18, r18
 17a:	33 1f       	adc	r19, r19
 17c:	9a 95       	dec	r25
 17e:	e1 f7       	brne	.-8      	; 0x178 <CHAR2BCD3+0x2c>
 180:	84 2f       	mov	r24, r20
 182:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__udivmodqi4>
 186:	89 2f       	mov	r24, r25
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	28 2b       	or	r18, r24
 18c:	39 2b       	or	r19, r25
        high++;
        input -= 10;
    }

    return  (high << 4) | input;        // Add ones and return answer
}
 18e:	c9 01       	movw	r24, r18
 190:	08 95       	ret

00000192 <LCD_puts_f>:
*
*****************************************************************************/

// mt void LCD_puts_f(char __flash *pFlashStr, char scrollmode)
void LCD_puts_f(const char *pFlashStr, char scrollmode)
{
 192:	38 2f       	mov	r19, r24
 194:	29 2f       	mov	r18, r25
    // char i;
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer
 196:	80 91 02 01 	lds	r24, 0x0102
 19a:	88 23       	and	r24, r24
 19c:	e1 f7       	brne	.-8      	; 0x196 <LCD_puts_f+0x4>
 19e:	ab e1       	ldi	r26, 0x1B	; 27
 1a0:	b1 e0       	ldi	r27, 0x01	; 1
 1a2:	83 2f       	mov	r24, r19
 1a4:	92 2f       	mov	r25, r18
 1a6:	fc 01       	movw	r30, r24
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <LCD_puts_f+0x1a>

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
 1aa:	8d 93       	st	X+, r24
 1ac:	9e 2f       	mov	r25, r30
 1ae:	93 1b       	sub	r25, r19
	uint8_t i;

    while (gLCD_Update_Required);      // Wait for access to buffer

    // mt: for (i = 0; pFlashStr[i] && i < TEXTBUFFER_SIZE; i++)
	for (i = 0; pgm_read_byte(&pFlashStr[i]) && i < TEXTBUFFER_SIZE; i++)
 1b0:	84 91       	lpm	r24, Z+
 1b2:	88 23       	and	r24, r24
 1b4:	29 f0       	breq	.+10     	; 0x1c0 <LCD_puts_f+0x2e>
 1b6:	31 96       	adiw	r30, 0x01	; 1
 1b8:	21 e0       	ldi	r18, 0x01	; 1
 1ba:	a4 33       	cpi	r26, 0x34	; 52
 1bc:	b2 07       	cpc	r27, r18
 1be:	a9 f7       	brne	.-22     	; 0x1aa <LCD_puts_f+0x18>
    {
        // mt: gTextBuffer[i] = pFlashStr[i];
		gTextBuffer[i] = pgm_read_byte(&pFlashStr[i]);
    }

    gTextBuffer[i] = '\0';
 1c0:	e9 2f       	mov	r30, r25
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	e5 5e       	subi	r30, 0xE5	; 229
 1c6:	fe 4f       	sbci	r31, 0xFE	; 254
 1c8:	10 82       	st	Z, r1

    if (i > 6)
 1ca:	97 30       	cpi	r25, 0x07	; 7
 1cc:	48 f0       	brcs	.+18     	; 0x1e0 <LCD_puts_f+0x4e>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	80 93 06 01 	sts	0x0106, r24
        gScroll = 0;
 1d4:	10 92 34 01 	sts	0x0134, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	80 93 03 01 	sts	0x0103, r24
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <LCD_puts_f+0x56>
    }
    else
    {
        gScrollMode = 0;        
 1e0:	10 92 06 01 	sts	0x0106, r1
        gScroll = 0;
 1e4:	10 92 34 01 	sts	0x0134, r1
    }

    gLCD_Update_Required = 1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	80 93 02 01 	sts	0x0102, r24
}
 1ee:	08 95       	ret

000001f0 <LCD_puts>:
*
*	Purpose :		Writes a string to the LCD
*
*****************************************************************************/
void LCD_puts(char *pStr, char scrollmode)
{
 1f0:	48 2f       	mov	r20, r24
 1f2:	29 2f       	mov	r18, r25
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer
 1f4:	80 91 02 01 	lds	r24, 0x0102
 1f8:	88 23       	and	r24, r24
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <LCD_puts+0x4>
 1fc:	ab e1       	ldi	r26, 0x1B	; 27
 1fe:	b1 e0       	ldi	r27, 0x01	; 1
 200:	84 2f       	mov	r24, r20
 202:	92 2f       	mov	r25, r18
 204:	9c 01       	movw	r18, r24
 206:	f9 01       	movw	r30, r18
 208:	01 c0       	rjmp	.+2      	; 0x20c <LCD_puts+0x1c>

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
    {
        gTextBuffer[i] = pStr[i];
 20a:	8d 93       	st	X+, r24
 20c:	9e 2f       	mov	r25, r30
 20e:	94 1b       	sub	r25, r20
{
	uint8_t i; // char i;
	
	while (gLCD_Update_Required);      // Wait for access to buffer

    for (i = 0; pStr[i] && i < TEXTBUFFER_SIZE; i++)
 210:	80 81       	ld	r24, Z
 212:	88 23       	and	r24, r24
 214:	29 f0       	breq	.+10     	; 0x220 <LCD_puts+0x30>
 216:	31 96       	adiw	r30, 0x01	; 1
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	a4 33       	cpi	r26, 0x34	; 52
 21c:	b2 07       	cpc	r27, r18
 21e:	a9 f7       	brne	.-22     	; 0x20a <LCD_puts+0x1a>
    {
        gTextBuffer[i] = pStr[i];
    }

    gTextBuffer[i] = '\0';
 220:	e9 2f       	mov	r30, r25
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	e5 5e       	subi	r30, 0xE5	; 229
 226:	fe 4f       	sbci	r31, 0xFE	; 254
 228:	10 82       	st	Z, r1

    if (i > 6)
 22a:	97 30       	cpi	r25, 0x07	; 7
 22c:	48 f0       	brcs	.+18     	; 0x240 <LCD_puts+0x50>
    {
        gScrollMode = 1;        // Scroll if text is longer than display size
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 06 01 	sts	0x0106, r24
        gScroll = 0;
 234:	10 92 34 01 	sts	0x0134, r1
        gLCD_Start_Scroll_Timer = 3;    //Start-up delay before scrolling the text
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	80 93 03 01 	sts	0x0103, r24
 23e:	04 c0       	rjmp	.+8      	; 0x248 <LCD_puts+0x58>
    }
    else
    {
        gScrollMode = 0;        
 240:	10 92 06 01 	sts	0x0106, r1
        gScroll = 0;
 244:	10 92 34 01 	sts	0x0134, r1
    }

    gLCD_Update_Required = 1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 02 01 	sts	0x0102, r24
}
 24e:	08 95       	ret

00000250 <LCD_putc>:
*****************************************************************************/
// mt void LCD_putc(char digit, char character)
// mt void LCD_putc(char digit, char character)
void LCD_putc(uint8_t digit, char character)
{
    if (digit < TEXTBUFFER_SIZE)
 250:	89 31       	cpi	r24, 0x19	; 25
 252:	28 f4       	brcc	.+10     	; 0x25e <LCD_putc+0xe>
        gTextBuffer[digit] = character;
 254:	e8 2f       	mov	r30, r24
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	e5 5e       	subi	r30, 0xE5	; 229
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	60 83       	st	Z, r22
 25e:	08 95       	ret

00000260 <LCD_Clear>:
*
*	Purpose :		Clear the LCD
*
*****************************************************************************/
void LCD_Clear(void)
{
 260:	eb e1       	ldi	r30, 0x1B	; 27
 262:	f1 e0       	ldi	r31, 0x01	; 1
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
        gTextBuffer[i] = ' ';
 264:	80 e2       	ldi	r24, 0x20	; 32
 266:	81 93       	st	Z+, r24
*****************************************************************************/
void LCD_Clear(void)
{
    uint8_t i; // char i;
	   
    for (i=0; i<TEXTBUFFER_SIZE; i++)
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	e4 33       	cpi	r30, 0x34	; 52
 26c:	f9 07       	cpc	r31, r25
 26e:	d9 f7       	brne	.-10     	; 0x266 <LCD_Clear+0x6>
        gTextBuffer[i] = ' ';
}
 270:	08 95       	ret

00000272 <LCD_Colon>:
*	Purpose :		Enable/disable colons on the LCD
*
*****************************************************************************/
void LCD_Colon(char show)
{
    gColon = show;
 272:	80 93 05 01 	sts	0x0105, r24
}
 276:	08 95       	ret

00000278 <LCD_UpdateRequired>:
*
*	Purpose :		Tells the LCD that there is new data to be presented
*
*****************************************************************************/
void LCD_UpdateRequired(char update, char scrollmode)
{
 278:	98 2f       	mov	r25, r24

    while (gLCD_Update_Required);
 27a:	80 91 02 01 	lds	r24, 0x0102
 27e:	88 23       	and	r24, r24
 280:	e1 f7       	brne	.-8      	; 0x27a <LCD_UpdateRequired+0x2>
    
    gScrollMode = scrollmode;
 282:	60 93 06 01 	sts	0x0106, r22
    gScroll = 0;
 286:	10 92 34 01 	sts	0x0134, r1

    gLCD_Update_Required = update;
 28a:	90 93 02 01 	sts	0x0102, r25
}
 28e:	08 95       	ret

00000290 <LCD_FlashReset>:
*	Purpose :		This function resets the blinking cycle of a flashing digit
*
*****************************************************************************/
void LCD_FlashReset(void)
{
    gFlashTimer = 0;
 290:	10 92 04 01 	sts	0x0104, r1
}
 294:	08 95       	ret

00000296 <LCD_WriteDigit>:
*   Purpose :       Stores LCD control data in the LCD_displayData buffer.
*                   (The LCD_displayData is latched in the LCD_SOF interrupt.)
*
*****************************************************************************/
void LCD_WriteDigit(char c, char digit)
{
 296:	98 2f       	mov	r25, r24
    char mask, nibble;
    char *ptr;
    char i;


    if (digit > 5)                              // Skip if digit is illegal
 298:	66 30       	cpi	r22, 0x06	; 6
 29a:	b0 f5       	brcc	.+108    	; 0x308 <LCD_WriteDigit+0x72>
        return;

    //Lookup character table for segmet data
    if ((c >= '*') && (c <= 'z'))
 29c:	8a 52       	subi	r24, 0x2A	; 42
 29e:	81 35       	cpi	r24, 0x51	; 81
 2a0:	18 f0       	brcs	.+6      	; 0x2a8 <LCD_WriteDigit+0x12>
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	0c c0       	rjmp	.+24     	; 0x2c0 <LCD_WriteDigit+0x2a>
    {
        // c is a letter
        if (c >= 'a')                           // Convert to upper case
 2a8:	91 36       	cpi	r25, 0x61	; 97
 2aa:	08 f0       	brcs	.+2      	; 0x2ae <LCD_WriteDigit+0x18>
            c &= ~0x20;                         // if necessarry
 2ac:	9f 7d       	andi	r25, 0xDF	; 223

        c -= '*';

		//mt seg = LCD_character_table[c];
		seg = (unsigned int) pgm_read_word(&LCD_character_table[(uint8_t)c]); 
 2ae:	9a 52       	subi	r25, 0x2A	; 42
 2b0:	e9 2f       	mov	r30, r25
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	ee 0f       	add	r30, r30
 2b6:	ff 1f       	adc	r31, r31
 2b8:	e8 59       	subi	r30, 0x98	; 152
 2ba:	ff 4f       	sbci	r31, 0xFF	; 255
 2bc:	45 91       	lpm	r20, Z+
 2be:	54 91       	lpm	r21, Z+
	}

    // Adjust mask according to LCD segment mapping
    if (digit & 0x01)
 2c0:	86 2f       	mov	r24, r22
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	dc 01       	movw	r26, r24
 2c6:	a1 70       	andi	r26, 0x01	; 1
 2c8:	b0 70       	andi	r27, 0x00	; 0
 2ca:	60 fd       	sbrc	r22, 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <LCD_WriteDigit+0x3c>
 2ce:	90 ef       	ldi	r25, 0xF0	; 240
 2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <LCD_WriteDigit+0x3e>
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
        mask = 0x0F;                // Digit 1, 3, 5
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}
 2d4:	66 95       	lsr	r22
 2d6:	e6 2f       	mov	r30, r22
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	e9 5f       	subi	r30, 0xF9	; 249
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	30 e0       	ldi	r19, 0x00	; 0

    for (i = 0; i < 4; i++)
    {
        nibble = seg & 0x000F;
 2e0:	24 2f       	mov	r18, r20
 2e2:	2f 70       	andi	r18, 0x0F	; 15
        seg >>= 4;
 2e4:	84 e0       	ldi	r24, 0x04	; 4
 2e6:	56 95       	lsr	r21
 2e8:	47 95       	ror	r20
 2ea:	8a 95       	dec	r24
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <LCD_WriteDigit+0x50>
        if (digit & 0x01)
 2ee:	10 97       	sbiw	r26, 0x00	; 0
 2f0:	11 f0       	breq	.+4      	; 0x2f6 <LCD_WriteDigit+0x60>
            nibble <<= 4;
 2f2:	22 95       	swap	r18
 2f4:	20 7f       	andi	r18, 0xF0	; 240
        *ptr = (*ptr & mask) | nibble;
 2f6:	80 81       	ld	r24, Z
 2f8:	89 23       	and	r24, r25
 2fa:	28 2b       	or	r18, r24
 2fc:	20 83       	st	Z, r18
    else
        mask = 0xF0;                // Digit 0, 2, 4

    ptr = LCD_Data + (digit >> 1);  // digit = {0,0,1,1,2,2}

    for (i = 0; i < 4; i++)
 2fe:	3f 5f       	subi	r19, 0xFF	; 255
 300:	34 30       	cpi	r19, 0x04	; 4
 302:	11 f0       	breq	.+4      	; 0x308 <LCD_WriteDigit+0x72>
        nibble = seg & 0x000F;
        seg >>= 4;
        if (digit & 0x01)
            nibble <<= 4;
        *ptr = (*ptr & mask) | nibble;
        ptr += 5;
 304:	35 96       	adiw	r30, 0x05	; 5
 306:	ec cf       	rjmp	.-40     	; 0x2e0 <LCD_WriteDigit+0x4a>
 308:	08 95       	ret

0000030a <LCD_AllSegments>:
*****************************************************************************/
void LCD_AllSegments(char show)
{
    unsigned char i;

    if (show)
 30a:	81 11       	cpse	r24, r1
 30c:	8f ef       	ldi	r24, 0xFF	; 255
 30e:	e7 e0       	ldi	r30, 0x07	; 7
 310:	f1 e0       	ldi	r31, 0x01	; 1
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
        *(LCD_Data + i) = show;
 312:	81 93       	st	Z+, r24

    if (show)
        show = 0xFF;

    // Set/clear all bits in all LCD registers
    for (i=0; i < LCD_REGISTER_COUNT; i++)
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	eb 31       	cpi	r30, 0x1B	; 27
 318:	f9 07       	cpc	r31, r25
 31a:	d9 f7       	brne	.-10     	; 0x312 <LCD_AllSegments+0x8>
        *(LCD_Data + i) = show;
}
 31c:	08 95       	ret

0000031e <LCD_Init>:
*                   Set up the LCD (timing, contrast, etc.)
*
*****************************************************************************/
void LCD_Init (void)
{
    LCD_AllSegments(FALSE);                     // Clear segment buffer.
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 85 01 	call	0x30a	; 0x30a <LCD_AllSegments>

    LCD_CONTRAST_LEVEL(LCD_INITIAL_CONTRAST);    //Set the LCD contrast level
 324:	8f e0       	ldi	r24, 0x0F	; 15
 326:	80 93 e7 00 	sts	0x00E7, r24

    // Select asynchronous clock source, enable all COM pins and enable all
    // segment pins.
    LCDCRB = (1<<LCDCS) | (3<<LCDMUX0) | (7<<LCDPM0);
 32a:	87 eb       	ldi	r24, 0xB7	; 183
 32c:	80 93 e5 00 	sts	0x00E5, r24

    // Set LCD prescaler to give a framerate of 32,0 Hz
    LCDFRR = (0<<LCDPS0) | (7<<LCDCD0);    
 330:	87 e0       	ldi	r24, 0x07	; 7
 332:	80 93 e6 00 	sts	0x00E6, r24

    LCDCRA = (1<<LCDEN) | (1<<LCDAB);           // Enable LCD and set low power waveform
 336:	e4 ee       	ldi	r30, 0xE4	; 228
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 ec       	ldi	r24, 0xC0	; 192
 33c:	80 83       	st	Z, r24

    //Enable LCD start of frame interrupt
    LCDCRA |= (1<<LCDIE);
 33e:	80 81       	ld	r24, Z
 340:	88 60       	ori	r24, 0x08	; 8
 342:	80 83       	st	Z, r24

    gLCD_Update_Required = FALSE;
 344:	10 92 02 01 	sts	0x0102, r1


}
 348:	08 95       	ret

0000034a <__vector_22>:
*   Purpose: Latch the LCD_displayData and Set LCD_status.updateComplete
*
*****************************************************************************/

SIGNAL(SIG_LCD)
{
 34a:	1f 92       	push	r1
 34c:	0f 92       	push	r0
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	0f 92       	push	r0
 352:	11 24       	eor	r1, r1
 354:	ef 92       	push	r14
 356:	ff 92       	push	r15
 358:	0f 93       	push	r16
 35a:	1f 93       	push	r17
 35c:	2f 93       	push	r18
 35e:	3f 93       	push	r19
 360:	4f 93       	push	r20
 362:	5f 93       	push	r21
 364:	6f 93       	push	r22
 366:	7f 93       	push	r23
 368:	8f 93       	push	r24
 36a:	9f 93       	push	r25
 36c:	af 93       	push	r26
 36e:	bf 93       	push	r27
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ef 93       	push	r30
 376:	ff 93       	push	r31
        auto_joystick_count = 0;
*/

/**************** Auto press joystick for the main.c, END ***************/    

    LCD_timer--;                    // Decreased every LCD frame
 378:	00 91 01 01 	lds	r16, 0x0101
 37c:	01 50       	subi	r16, 0x01	; 1
 37e:	00 93 01 01 	sts	0x0101, r16

    if (gScrollMode)
 382:	80 91 06 01 	lds	r24, 0x0106
 386:	88 23       	and	r24, r24
 388:	71 f0       	breq	.+28     	; 0x3a6 <__vector_22+0x5c>
    {
        // If we are in scroll mode, and the timer has expired,
        // we will update the LCD
        if (LCD_timer == 0)
 38a:	00 23       	and	r16, r16
 38c:	71 f4       	brne	.+28     	; 0x3aa <__vector_22+0x60>
        {
            if (gLCD_Start_Scroll_Timer == 0)
 38e:	80 91 03 01 	lds	r24, 0x0103
 392:	88 23       	and	r24, r24
 394:	21 f4       	brne	.+8      	; 0x39e <__vector_22+0x54>
            {
                gLCD_Update_Required = TRUE;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	80 93 02 01 	sts	0x0102, r24
 39c:	06 c0       	rjmp	.+12     	; 0x3aa <__vector_22+0x60>
            }
            else
                gLCD_Start_Scroll_Timer--;
 39e:	81 50       	subi	r24, 0x01	; 1
 3a0:	80 93 03 01 	sts	0x0103, r24
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <__vector_22+0x60>
    }
    else    
    {   // if not scrolling,
        // disble LCD start of frame interrupt
//        cbi(LCDCRA, LCDIE);   //DEBUG
        gScroll = 0;
 3a6:	10 92 34 01 	sts	0x0134, r1
    }


    EOL = FALSE;
    if (gLCD_Update_Required == TRUE)
 3aa:	80 91 02 01 	lds	r24, 0x0102
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__vector_22+0x6a>
 3b2:	53 c0       	rjmp	.+166    	; 0x45a <__vector_22+0x110>
    {
        // Duty cycle of flashing characters
        if (gFlashTimer < (LCD_FLASH_SEED >> 1))
 3b4:	e0 90 04 01 	lds	r14, 0x0104
 3b8:	ff 24       	eor	r15, r15
 3ba:	10 e0       	ldi	r17, 0x00	; 0
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d0 e0       	ldi	r29, 0x00	; 0
 3c0:	6c 2f       	mov	r22, r28
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
        {
            if ((gScroll+i) >= 0 && (!EOL))
 3c2:	80 91 34 01 	lds	r24, 0x0134
 3c6:	99 27       	eor	r25, r25
 3c8:	87 fd       	sbrc	r24, 7
 3ca:	90 95       	com	r25
 3cc:	8c 0f       	add	r24, r28
 3ce:	9d 1f       	adc	r25, r29
 3d0:	97 fd       	sbrc	r25, 7
 3d2:	16 c0       	rjmp	.+44     	; 0x400 <__vector_22+0xb6>
 3d4:	11 23       	and	r17, r17
 3d6:	a1 f4       	brne	.+40     	; 0x400 <__vector_22+0xb6>
            {
                // We have some visible characters
                c = gTextBuffer[i + gScroll];
 3d8:	80 91 34 01 	lds	r24, 0x0134
 3dc:	99 27       	eor	r25, r25
 3de:	87 fd       	sbrc	r24, 7
 3e0:	90 95       	com	r25
 3e2:	fe 01       	movw	r30, r28
 3e4:	e5 5e       	subi	r30, 0xE5	; 229
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	e8 0f       	add	r30, r24
 3ea:	f9 1f       	adc	r31, r25
 3ec:	80 81       	ld	r24, Z
                c_flash = c & 0x80 ? 1 : 0;
 3ee:	f8 2e       	mov	r15, r24
 3f0:	ff 1c       	adc	r15, r15
 3f2:	ff 24       	eor	r15, r15
 3f4:	ff 1c       	adc	r15, r15
                c = c & 0x7F;
 3f6:	8f 77       	andi	r24, 0x7F	; 127

                if (c == '\0')
 3f8:	21 f4       	brne	.+8      	; 0x402 <__vector_22+0xb8>
 3fa:	1c 2f       	mov	r17, r28
 3fc:	1f 5f       	subi	r17, 0xFF	; 255
 3fe:	01 c0       	rjmp	.+2      	; 0x402 <__vector_22+0xb8>
 400:	80 e2       	ldi	r24, 0x20	; 32
            else
                c = ' ';

            // Check if this character is flashing

            if (c_flash && flash)
 402:	ff 20       	and	r15, r15
 404:	21 f0       	breq	.+8      	; 0x40e <__vector_22+0xc4>
 406:	94 e0       	ldi	r25, 0x04	; 4
 408:	9e 15       	cp	r25, r14
 40a:	08 f4       	brcc	.+2      	; 0x40e <__vector_22+0xc4>
                LCD_WriteDigit(' ', i);
 40c:	80 e2       	ldi	r24, 0x20	; 32
            else
                LCD_WriteDigit(c, i);
 40e:	0e 94 4b 01 	call	0x296	; 0x296 <LCD_WriteDigit>
 412:	21 96       	adiw	r28, 0x01	; 1
            flash = 0;
        else
            flash = 1;

        // Repeat for the six LCD characters
        for (i = 0; i < 6; i++)
 414:	c6 30       	cpi	r28, 0x06	; 6
 416:	d1 05       	cpc	r29, r1
 418:	99 f6       	brne	.-90     	; 0x3c0 <__vector_22+0x76>
 41a:	ac ee       	ldi	r26, 0xEC	; 236
 41c:	b0 e0       	ldi	r27, 0x00	; 0
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
            *(pLCDREG + i) = *(LCD_Data+i);
 41e:	fd 01       	movw	r30, r26
 420:	e5 5e       	subi	r30, 0xE5	; 229
 422:	ff 4f       	sbci	r31, 0xFF	; 255
 424:	80 81       	ld	r24, Z
 426:	8d 93       	st	X+, r24
            else
                LCD_WriteDigit(c, i);
        }

        // Copy the segment buffer to the real segments
        for (i = 0; i < LCD_REGISTER_COUNT; i++)
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	a0 30       	cpi	r26, 0x00	; 0
 42c:	b8 07       	cpc	r27, r24
 42e:	b9 f7       	brne	.-18     	; 0x41e <__vector_22+0xd4>
            *(pLCDREG + i) = *(LCD_Data+i);

        // Handle colon
        if (gColon)
 430:	80 91 05 01 	lds	r24, 0x0105
 434:	88 23       	and	r24, r24
 436:	21 f0       	breq	.+8      	; 0x440 <__vector_22+0xf6>
            *(pLCDREG + 8) = 0x01;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	80 93 f4 00 	sts	0x00F4, r24
 43e:	02 c0       	rjmp	.+4      	; 0x444 <__vector_22+0xfa>
        else
            *(pLCDREG + 8) = 0x00;
 440:	10 92 f4 00 	sts	0x00F4, r1

        // If the text scrolled off the display,
        // we have to start over again.
        if (EOL == 1)
 444:	11 30       	cpi	r17, 0x01	; 1
 446:	11 f4       	brne	.+4      	; 0x44c <__vector_22+0x102>
            gScroll = -6;
 448:	8a ef       	ldi	r24, 0xFA	; 250
 44a:	03 c0       	rjmp	.+6      	; 0x452 <__vector_22+0x108>
        else
            gScroll++;
 44c:	80 91 34 01 	lds	r24, 0x0134
 450:	8f 5f       	subi	r24, 0xFF	; 255
 452:	80 93 34 01 	sts	0x0134, r24

        // No need to update anymore
        gLCD_Update_Required = FALSE;
 456:	10 92 02 01 	sts	0x0102, r1
    }


    // LCD_timer is used when scrolling text
    if (LCD_timer == 0)
 45a:	00 23       	and	r16, r16
 45c:	19 f4       	brne	.+6      	; 0x464 <__vector_22+0x11a>
    {
/*        if ((gScroll <= 0) || EOL)
            LCD_timer = LCD_TIMER_SEED/2;
        else*/
            LCD_timer = LCD_TIMER_SEED;
 45e:	83 e0       	ldi	r24, 0x03	; 3
 460:	80 93 01 01 	sts	0x0101, r24
    }

    // gFlashTimer is used when flashing characters
    if (gFlashTimer == LCD_FLASH_SEED)
 464:	80 91 04 01 	lds	r24, 0x0104
 468:	8a 30       	cpi	r24, 0x0A	; 10
 46a:	19 f4       	brne	.+6      	; 0x472 <__vector_22+0x128>
        gFlashTimer= 0;
 46c:	10 92 04 01 	sts	0x0104, r1
 470:	03 c0       	rjmp	.+6      	; 0x478 <__vector_22+0x12e>
    else
        gFlashTimer++;
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	80 93 04 01 	sts	0x0104, r24

}
 478:	ff 91       	pop	r31
 47a:	ef 91       	pop	r30
 47c:	df 91       	pop	r29
 47e:	cf 91       	pop	r28
 480:	bf 91       	pop	r27
 482:	af 91       	pop	r26
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	7f 91       	pop	r23
 48a:	6f 91       	pop	r22
 48c:	5f 91       	pop	r21
 48e:	4f 91       	pop	r20
 490:	3f 91       	pop	r19
 492:	2f 91       	pop	r18
 494:	1f 91       	pop	r17
 496:	0f 91       	pop	r16
 498:	ff 90       	pop	r15
 49a:	ef 90       	pop	r14
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__udivmodqi4>:
 4a6:	99 1b       	sub	r25, r25
 4a8:	79 e0       	ldi	r23, 0x09	; 9
 4aa:	04 c0       	rjmp	.+8      	; 0x4b4 <__udivmodqi4_ep>

000004ac <__udivmodqi4_loop>:
 4ac:	99 1f       	adc	r25, r25
 4ae:	96 17       	cp	r25, r22
 4b0:	08 f0       	brcs	.+2      	; 0x4b4 <__udivmodqi4_ep>
 4b2:	96 1b       	sub	r25, r22

000004b4 <__udivmodqi4_ep>:
 4b4:	88 1f       	adc	r24, r24
 4b6:	7a 95       	dec	r23
 4b8:	c9 f7       	brne	.-14     	; 0x4ac <__udivmodqi4_loop>
 4ba:	80 95       	com	r24
 4bc:	08 95       	ret

000004be <_exit>:
 4be:	f8 94       	cli

000004c0 <__stop_program>:
 4c0:	ff cf       	rjmp	.-2      	; 0x4c0 <__stop_program>
